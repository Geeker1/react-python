'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toast = exports.ToastContainer = undefined;

var _emotion = require('emotion');

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactEmotion = require('react-emotion');

var _reactEmotion2 = _interopRequireDefault(_reactEmotion);

var _reactTransitionGroup = require('react-transition-group');

var _icons = require('./icons');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var borderRadius = 4;
var gutter = 8;
var autoDismissDuration = 5000;
var toastWidth = 360;
var shrink = /*#__PURE__*/(0, _reactEmotion.keyframes)('from{height:100%;}to{height:0%}/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBWXdCIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */', 'label:shrink;');

var A11yText = function A11yText(_ref) {
  var Tag = _ref.tag,
      props = _objectWithoutProperties(_ref, ['tag']);

  return _react2.default.createElement(Tag, _extends({
    className: (0, _emotion.css)({
      border: 0,
      clip: 'rect(1px, 1px, 1px, 1px)',
      height: 1,
      overflow: 'hidden',
      padding: 0,
      position: 'absolute',
      whiteSpace: 'nowrap',
      width: 1
    }, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JJIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */')
  }, props));
};
A11yText.defaultProps = {
  tag: 'span'
};

var appearances = {
  success: {
    icon: _icons.CheckIcon,
    text: 'rgb(31, 116, 38)',
    fg: 'rgb(52, 194, 64)',
    bg: 'rgb(194, 237, 198)'
  },
  error: {
    icon: _icons.FlameIcon,
    text: 'rgb(128, 40, 40)',
    fg: 'rgb(214, 66, 66)',
    bg: 'rgb(243, 198, 198)'
  },
  info: {
    icon: _icons.InfoIcon,
    text: 'rgb(108,121,143)',
    fg: 'rgb(81, 157, 255)',
    bg: 'white'
  }
};

var Button = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1czsy1g0',
  label: 'Button'
})({
  cursor: 'pointer',
  flexShrink: 0,
  opacity: 0.5,
  padding: gutter + 'px ' + gutter * 1.5 + 'px',
  transition: 'opacity 150ms',

  ':hover': { opacity: 1 }
}, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0RlIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */');

var Content = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1czsy1g1',
  label: 'Content'
})({
  flexGrow: 1,
  fontSize: 14,
  lineHeight: 1.4,
  minHeight: 40,
  padding: gutter + 'px ' + gutter * 1.5 + 'px'
}, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0VnQiIsImZpbGUiOiIuLi9zcmMvc3R5bGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IDQ7XG5jb25zdCBndXR0ZXIgPSA4O1xuY29uc3QgYXV0b0Rpc21pc3NEdXJhdGlvbiA9IDUwMDA7XG5jb25zdCB0b2FzdFdpZHRoID0gMzYwO1xuY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogJ3JnYigzMSwgMTE2LCAzOCknLFxuICAgIGZnOiAncmdiKDUyLCAxOTQsIDY0KScsXG4gICAgYmc6ICdyZ2IoMTk0LCAyMzcsIDE5OCknLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiAncmdiKDEyOCwgNDAsIDQwKScsXG4gICAgZmc6ICdyZ2IoMjE0LCA2NiwgNjYpJyxcbiAgICBiZzogJ3JnYigyNDMsIDE5OCwgMTk4KScsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiAncmdiKDEwOCwxMjEsMTQzKScsXG4gICAgZmc6ICdyZ2IoODEsIDE1NywgMjU1KScsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuZGl2KHtcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIG9wYWNpdHk6IDAuNSxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMTUwbXMnLFxuXG4gICc6aG92ZXInOiB7IG9wYWNpdHk6IDEgfSxcbn0pO1xuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLmRpdih7XG4gIGZsZXhHcm93OiAxLFxuICBmb250U2l6ZTogMTQsXG4gIGxpbmVIZWlnaHQ6IDEuNCxcbiAgbWluSGVpZ2h0OiA0MCxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbn0pO1xuXG4vLyBOT1RFOiBpbnZva2UgYW5pbWF0aW9uIHdoZW4gTk9UIGBhdXRvRGlzbWlzc2Agd2l0aCBvcGFjaXR5IG9mIDAgdG8gYXZvaWQgYVxuLy8gcGFpbnQgYnVnIGluIEZpcmVGb3guXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MjUyODlcbmNvbnN0IENvdW50ZG93biA9IHN0eWxlZC5kaXYoKHsgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc0R1cmF0aW9ufW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcyB9KSA9PiB7XG4gIGNvbnN0IG1ldGEgPSBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXTtcbiAgY29uc3QgR2x5cGggPSBtZXRhLmljb247XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRhLmZnLFxuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgY29sb3I6IG1ldGEuYmcsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IGd1dHRlcixcbiAgICAgICAgcGFkZGluZ1RvcDogZ3V0dGVyLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB3aWR0aDogMzAsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxDb3VudGRvd24gb3BhY2l0eT17YXV0b0Rpc21pc3MgPyAxIDogMH0gLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IHRvYXN0U3RhdGVzID0ge1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbn07XG5jb25zdCB0cmFuc2l0aW9uRHVyYXRpb25NcyA9IDIyMDtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3RyYW5zaXRpb25EdXJhdGlvbk1zfW1zYDtcbmNvbnN0IFRvYXN0RWxlbWVudCA9IHN0eWxlZC5kaXYoKHsgYXBwZWFyYW5jZSwgdHJhbnNpdGlvblN0YXRlIH0pID0+ICh7XG4gIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gIGJvcmRlclJhZGl1cyxcbiAgYm94U2hhZG93OiAnMCAzcHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xNzUpJyxcbiAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgbWFyZ2luQm90dG9tOiBndXR0ZXIsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259IGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpYCxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyxcbiAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gIC4uLnRvYXN0U3RhdGVzW3RyYW5zaXRpb25TdGF0ZV0sXG59KSk7XG5cbmV4cG9ydCBjb25zdCBUb2FzdENvbnRhaW5lciA9ICh7IGNoaWxkcmVuIH06ICopID0+IChcbiAgPGRpdlxuICAgIGNzcz17e1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmc6IGd1dHRlcixcbiAgICAgIHBvaW50ZXJFdmVudHM6IENoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA/ICdhdXRvJyA6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCArIGd1dHRlciAqIDIsXG4gICAgfX1cbiAgPlxuICAgIDxUcmFuc2l0aW9uR3JvdXAgY29tcG9uZW50PXtudWxsfT57Y2hpbGRyZW59PC9UcmFuc2l0aW9uR3JvdXA+XG4gIDwvZGl2PlxuKTtcblxudHlwZSBBcHBlYXJhbmNlID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcbnR5cGUgUHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuLFxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxufTtcblxuZXhwb3J0IGNsYXNzIFRvYXN0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhdXRvRGlzbWlzczogZmFsc2UsXG4gIH07XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgYXV0b0Rpc21pc3MsIG9uRGlzbWlzcyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoYXV0b0Rpc21pc3MpIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQob25EaXNtaXNzLCBhdXRvRGlzbWlzc0R1cmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgYXV0b0Rpc21pc3MsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG9uRGlzbWlzcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYXBwZWFyXG4gICAgICAgIG1vdW50T25FbnRlclxuICAgICAgICB1bm1vdW50T25FeGl0XG4gICAgICAgIHRpbWVvdXQ9e3RyYW5zaXRpb25EdXJhdGlvbk1zfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtzdGF0ZSA9PiAoXG4gICAgICAgICAgPFRvYXN0RWxlbWVudCBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfSB0cmFuc2l0aW9uU3RhdGU9e3N0YXRlfT5cbiAgICAgICAgICAgIDxJY29uIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IGF1dG9EaXNtaXNzPXthdXRvRGlzbWlzc30gLz5cbiAgICAgICAgICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAgICAgICAgICB7b25EaXNtaXNzID8gKFxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgICAgICAgICA8QTExeVRleHQ+Q2xvc2U8L0ExMXlUZXh0PlxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDwvVG9hc3RFbGVtZW50PlxuICAgICAgICApfVxuICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */');

// NOTE: invoke animation when NOT `autoDismiss` with opacity of 0 to avoid a
// paint bug in FireFox.
// https://bugzilla.mozilla.org/show_bug.cgi?id=625289
var Countdown = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1czsy1g2',
  label: 'Countdown'
})(function (_ref2) {
  var opacity = _ref2.opacity;
  return {
    animation: shrink + ' ' + autoDismissDuration + 'ms linear',
    backgroundColor: 'rgba(0,0,0,0.1)',
    bottom: 0,
    height: 0,
    left: 0,
    opacity: opacity,
    position: 'absolute',
    width: '100%'
  };
}, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkVrQiIsImZpbGUiOiIuLi9zcmMvc3R5bGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IDQ7XG5jb25zdCBndXR0ZXIgPSA4O1xuY29uc3QgYXV0b0Rpc21pc3NEdXJhdGlvbiA9IDUwMDA7XG5jb25zdCB0b2FzdFdpZHRoID0gMzYwO1xuY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogJ3JnYigzMSwgMTE2LCAzOCknLFxuICAgIGZnOiAncmdiKDUyLCAxOTQsIDY0KScsXG4gICAgYmc6ICdyZ2IoMTk0LCAyMzcsIDE5OCknLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiAncmdiKDEyOCwgNDAsIDQwKScsXG4gICAgZmc6ICdyZ2IoMjE0LCA2NiwgNjYpJyxcbiAgICBiZzogJ3JnYigyNDMsIDE5OCwgMTk4KScsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiAncmdiKDEwOCwxMjEsMTQzKScsXG4gICAgZmc6ICdyZ2IoODEsIDE1NywgMjU1KScsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuZGl2KHtcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIG9wYWNpdHk6IDAuNSxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMTUwbXMnLFxuXG4gICc6aG92ZXInOiB7IG9wYWNpdHk6IDEgfSxcbn0pO1xuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLmRpdih7XG4gIGZsZXhHcm93OiAxLFxuICBmb250U2l6ZTogMTQsXG4gIGxpbmVIZWlnaHQ6IDEuNCxcbiAgbWluSGVpZ2h0OiA0MCxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbn0pO1xuXG4vLyBOT1RFOiBpbnZva2UgYW5pbWF0aW9uIHdoZW4gTk9UIGBhdXRvRGlzbWlzc2Agd2l0aCBvcGFjaXR5IG9mIDAgdG8gYXZvaWQgYVxuLy8gcGFpbnQgYnVnIGluIEZpcmVGb3guXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MjUyODlcbmNvbnN0IENvdW50ZG93biA9IHN0eWxlZC5kaXYoKHsgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc0R1cmF0aW9ufW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcyB9KSA9PiB7XG4gIGNvbnN0IG1ldGEgPSBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXTtcbiAgY29uc3QgR2x5cGggPSBtZXRhLmljb247XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRhLmZnLFxuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgY29sb3I6IG1ldGEuYmcsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IGd1dHRlcixcbiAgICAgICAgcGFkZGluZ1RvcDogZ3V0dGVyLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB3aWR0aDogMzAsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxDb3VudGRvd24gb3BhY2l0eT17YXV0b0Rpc21pc3MgPyAxIDogMH0gLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IHRvYXN0U3RhdGVzID0ge1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbn07XG5jb25zdCB0cmFuc2l0aW9uRHVyYXRpb25NcyA9IDIyMDtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3RyYW5zaXRpb25EdXJhdGlvbk1zfW1zYDtcbmNvbnN0IFRvYXN0RWxlbWVudCA9IHN0eWxlZC5kaXYoKHsgYXBwZWFyYW5jZSwgdHJhbnNpdGlvblN0YXRlIH0pID0+ICh7XG4gIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gIGJvcmRlclJhZGl1cyxcbiAgYm94U2hhZG93OiAnMCAzcHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xNzUpJyxcbiAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgbWFyZ2luQm90dG9tOiBndXR0ZXIsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259IGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpYCxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyxcbiAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gIC4uLnRvYXN0U3RhdGVzW3RyYW5zaXRpb25TdGF0ZV0sXG59KSk7XG5cbmV4cG9ydCBjb25zdCBUb2FzdENvbnRhaW5lciA9ICh7IGNoaWxkcmVuIH06ICopID0+IChcbiAgPGRpdlxuICAgIGNzcz17e1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmc6IGd1dHRlcixcbiAgICAgIHBvaW50ZXJFdmVudHM6IENoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA/ICdhdXRvJyA6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCArIGd1dHRlciAqIDIsXG4gICAgfX1cbiAgPlxuICAgIDxUcmFuc2l0aW9uR3JvdXAgY29tcG9uZW50PXtudWxsfT57Y2hpbGRyZW59PC9UcmFuc2l0aW9uR3JvdXA+XG4gIDwvZGl2PlxuKTtcblxudHlwZSBBcHBlYXJhbmNlID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcbnR5cGUgUHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuLFxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxufTtcblxuZXhwb3J0IGNsYXNzIFRvYXN0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhdXRvRGlzbWlzczogZmFsc2UsXG4gIH07XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgYXV0b0Rpc21pc3MsIG9uRGlzbWlzcyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoYXV0b0Rpc21pc3MpIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQob25EaXNtaXNzLCBhdXRvRGlzbWlzc0R1cmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgYXV0b0Rpc21pc3MsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG9uRGlzbWlzcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYXBwZWFyXG4gICAgICAgIG1vdW50T25FbnRlclxuICAgICAgICB1bm1vdW50T25FeGl0XG4gICAgICAgIHRpbWVvdXQ9e3RyYW5zaXRpb25EdXJhdGlvbk1zfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtzdGF0ZSA9PiAoXG4gICAgICAgICAgPFRvYXN0RWxlbWVudCBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfSB0cmFuc2l0aW9uU3RhdGU9e3N0YXRlfT5cbiAgICAgICAgICAgIDxJY29uIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IGF1dG9EaXNtaXNzPXthdXRvRGlzbWlzc30gLz5cbiAgICAgICAgICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAgICAgICAgICB7b25EaXNtaXNzID8gKFxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgICAgICAgICA8QTExeVRleHQ+Q2xvc2U8L0ExMXlUZXh0PlxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDwvVG9hc3RFbGVtZW50PlxuICAgICAgICApfVxuICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */');
var Icon = function Icon(_ref3) {
  var appearance = _ref3.appearance,
      autoDismiss = _ref3.autoDismiss;

  var meta = appearances[appearance];
  var Glyph = meta.icon;

  return _react2.default.createElement(
    'div',
    {
      className: (0, _emotion.css)({
        backgroundColor: meta.fg,
        borderTopLeftRadius: borderRadius,
        borderBottomLeftRadius: borderRadius,
        color: meta.bg,
        flexShrink: 0,
        paddingBottom: gutter,
        paddingTop: gutter,
        position: 'relative',
        overflow: 'hidden',
        textAlign: 'center',
        width: 30
      }, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkZNIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */')
    },
    _react2.default.createElement(Countdown, { opacity: autoDismiss ? 1 : 0 }),
    _react2.default.createElement(Glyph, {
      className: (0, _emotion.css)({ position: 'relative', zIndex: 1 }, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEdhIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */')
    })
  );
};
var toastStates = {
  entering: { transform: 'translate3d(110%,0,0)' },
  entered: { transform: 'translate3d(0,0,0)' },
  exiting: { transform: 'translate3d(110%,0,0)' },
  exited: { transform: 'translate3d(110%,0,0)' }
};
var transitionDurationMs = 220;
var transitionDuration = transitionDurationMs + 'ms';
var ToastElement = /*#__PURE__*/(0, _reactEmotion2.default)('div', {
  target: 'e1czsy1g3',
  label: 'ToastElement'
})(function (_ref4) {
  var appearance = _ref4.appearance,
      transitionState = _ref4.transitionState;
  return _extends({
    backgroundColor: appearances[appearance].bg,
    borderRadius: borderRadius,
    boxShadow: '0 3px 8px rgba(0, 0, 0, 0.175)',
    color: appearances[appearance].text,
    display: 'flex',
    marginBottom: gutter,
    transition: 'transform ' + transitionDuration + ' cubic-bezier(0.2, 0, 0, 1)',
    transform: 'translate3d(110%,0,0)',
    width: toastWidth
  }, toastStates[transitionState]);
}, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0hxQiIsImZpbGUiOiIuLi9zcmMvc3R5bGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7IENoaWxkcmVuLCBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkLCB7IGtleWZyYW1lcyB9IGZyb20gJ3JlYWN0LWVtb3Rpb24nO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiwgVHJhbnNpdGlvbkdyb3VwIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5cbmltcG9ydCB7IENoZWNrSWNvbiwgRmxhbWVJY29uLCBJbmZvSWNvbiwgQ2xvc2VJY29uIH0gZnJvbSAnLi9pY29ucyc7XG5cbmNvbnN0IGJvcmRlclJhZGl1cyA9IDQ7XG5jb25zdCBndXR0ZXIgPSA4O1xuY29uc3QgYXV0b0Rpc21pc3NEdXJhdGlvbiA9IDUwMDA7XG5jb25zdCB0b2FzdFdpZHRoID0gMzYwO1xuY29uc3Qgc2hyaW5rID0ga2V5ZnJhbWVzYGZyb20geyBoZWlnaHQ6IDEwMCU7IH0gdG8geyBoZWlnaHQ6IDAlIH1gO1xuXG5jb25zdCBBMTF5VGV4dCA9ICh7IHRhZzogVGFnLCAuLi5wcm9wcyB9KSA9PiAoXG4gIDxUYWdcbiAgICBjc3M9e3tcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDFweCwgMXB4LCAxcHgsIDFweCknLFxuICAgICAgaGVpZ2h0OiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB3aWR0aDogMSxcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5BMTF5VGV4dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhZzogJ3NwYW4nLFxufTtcblxuY29uc3QgYXBwZWFyYW5jZXMgPSB7XG4gIHN1Y2Nlc3M6IHtcbiAgICBpY29uOiBDaGVja0ljb24sXG4gICAgdGV4dDogJ3JnYigzMSwgMTE2LCAzOCknLFxuICAgIGZnOiAncmdiKDUyLCAxOTQsIDY0KScsXG4gICAgYmc6ICdyZ2IoMTk0LCAyMzcsIDE5OCknLFxuICB9LFxuICBlcnJvcjoge1xuICAgIGljb246IEZsYW1lSWNvbixcbiAgICB0ZXh0OiAncmdiKDEyOCwgNDAsIDQwKScsXG4gICAgZmc6ICdyZ2IoMjE0LCA2NiwgNjYpJyxcbiAgICBiZzogJ3JnYigyNDMsIDE5OCwgMTk4KScsXG4gIH0sXG4gIGluZm86IHtcbiAgICBpY29uOiBJbmZvSWNvbixcbiAgICB0ZXh0OiAncmdiKDEwOCwxMjEsMTQzKScsXG4gICAgZmc6ICdyZ2IoODEsIDE1NywgMjU1KScsXG4gICAgYmc6ICd3aGl0ZScsXG4gIH0sXG59O1xuXG5jb25zdCBCdXR0b24gPSBzdHlsZWQuZGl2KHtcbiAgY3Vyc29yOiAncG9pbnRlcicsXG4gIGZsZXhTaHJpbms6IDAsXG4gIG9wYWNpdHk6IDAuNSxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbiAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMTUwbXMnLFxuXG4gICc6aG92ZXInOiB7IG9wYWNpdHk6IDEgfSxcbn0pO1xuXG5jb25zdCBDb250ZW50ID0gc3R5bGVkLmRpdih7XG4gIGZsZXhHcm93OiAxLFxuICBmb250U2l6ZTogMTQsXG4gIGxpbmVIZWlnaHQ6IDEuNCxcbiAgbWluSGVpZ2h0OiA0MCxcbiAgcGFkZGluZzogYCR7Z3V0dGVyfXB4ICR7Z3V0dGVyICogMS41fXB4YCxcbn0pO1xuXG4vLyBOT1RFOiBpbnZva2UgYW5pbWF0aW9uIHdoZW4gTk9UIGBhdXRvRGlzbWlzc2Agd2l0aCBvcGFjaXR5IG9mIDAgdG8gYXZvaWQgYVxuLy8gcGFpbnQgYnVnIGluIEZpcmVGb3guXG4vLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02MjUyODlcbmNvbnN0IENvdW50ZG93biA9IHN0eWxlZC5kaXYoKHsgb3BhY2l0eSB9KSA9PiAoe1xuICBhbmltYXRpb246IGAke3Nocmlua30gJHthdXRvRGlzbWlzc0R1cmF0aW9ufW1zIGxpbmVhcmAsXG4gIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG4gIGJvdHRvbTogMCxcbiAgaGVpZ2h0OiAwLFxuICBsZWZ0OiAwLFxuICBvcGFjaXR5LFxuICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbn0pKTtcbmNvbnN0IEljb24gPSAoeyBhcHBlYXJhbmNlLCBhdXRvRGlzbWlzcyB9KSA9PiB7XG4gIGNvbnN0IG1ldGEgPSBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXTtcbiAgY29uc3QgR2x5cGggPSBtZXRhLmljb247XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBtZXRhLmZnLFxuICAgICAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBib3JkZXJSYWRpdXMsXG4gICAgICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgY29sb3I6IG1ldGEuYmcsXG4gICAgICAgIGZsZXhTaHJpbms6IDAsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IGd1dHRlcixcbiAgICAgICAgcGFkZGluZ1RvcDogZ3V0dGVyLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICB3aWR0aDogMzAsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxDb3VudGRvd24gb3BhY2l0eT17YXV0b0Rpc21pc3MgPyAxIDogMH0gLz5cbiAgICAgIDxHbHlwaCBjc3M9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogMSB9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbmNvbnN0IHRvYXN0U3RhdGVzID0ge1xuICBlbnRlcmluZzogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknIH0sXG4gIGVudGVyZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMCwwLDApJyB9LFxuICBleGl0aW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZXhpdGVkOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbn07XG5jb25zdCB0cmFuc2l0aW9uRHVyYXRpb25NcyA9IDIyMDtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3RyYW5zaXRpb25EdXJhdGlvbk1zfW1zYDtcbmNvbnN0IFRvYXN0RWxlbWVudCA9IHN0eWxlZC5kaXYoKHsgYXBwZWFyYW5jZSwgdHJhbnNpdGlvblN0YXRlIH0pID0+ICh7XG4gIGJhY2tncm91bmRDb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0uYmcsXG4gIGJvcmRlclJhZGl1cyxcbiAgYm94U2hhZG93OiAnMCAzcHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xNzUpJyxcbiAgY29sb3I6IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdLnRleHQsXG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAgbWFyZ2luQm90dG9tOiBndXR0ZXIsXG4gIHRyYW5zaXRpb246IGB0cmFuc2Zvcm0gJHt0cmFuc2l0aW9uRHVyYXRpb259IGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpYCxcbiAgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyxcbiAgd2lkdGg6IHRvYXN0V2lkdGgsXG4gIC4uLnRvYXN0U3RhdGVzW3RyYW5zaXRpb25TdGF0ZV0sXG59KSk7XG5cbmV4cG9ydCBjb25zdCBUb2FzdENvbnRhaW5lciA9ICh7IGNoaWxkcmVuIH06ICopID0+IChcbiAgPGRpdlxuICAgIGNzcz17e1xuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG92ZXJmbG93WDogJ2hpZGRlbicsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHBhZGRpbmc6IGd1dHRlcixcbiAgICAgIHBvaW50ZXJFdmVudHM6IENoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA/ICdhdXRvJyA6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB3aWR0aDogdG9hc3RXaWR0aCArIGd1dHRlciAqIDIsXG4gICAgfX1cbiAgPlxuICAgIDxUcmFuc2l0aW9uR3JvdXAgY29tcG9uZW50PXtudWxsfT57Y2hpbGRyZW59PC9UcmFuc2l0aW9uR3JvdXA+XG4gIDwvZGl2PlxuKTtcblxudHlwZSBBcHBlYXJhbmNlID0gJEtleXM8dHlwZW9mIGFwcGVhcmFuY2VzPjtcbnR5cGUgUHJvcHMgPSB7XG4gIGFwcGVhcmFuY2U6IEFwcGVhcmFuY2UsXG4gIGF1dG9EaXNtaXNzOiBib29sZWFuLFxuICBjaGlsZHJlbjogTm9kZSxcbiAgb25EaXNtaXNzOiBFdmVudCA9PiAqLFxufTtcblxuZXhwb3J0IGNsYXNzIFRvYXN0IGV4dGVuZHMgQ29tcG9uZW50PFByb3BzPiB7XG4gIHRpbWVvdXQ6IG51bWJlcjtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBhdXRvRGlzbWlzczogZmFsc2UsXG4gIH07XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IHsgYXV0b0Rpc21pc3MsIG9uRGlzbWlzcyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoYXV0b0Rpc21pc3MpIHtcbiAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQob25EaXNtaXNzLCBhdXRvRGlzbWlzc0R1cmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBlYXJhbmNlLFxuICAgICAgYXV0b0Rpc21pc3MsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG9uRGlzbWlzcyxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRyYW5zaXRpb25cbiAgICAgICAgYXBwZWFyXG4gICAgICAgIG1vdW50T25FbnRlclxuICAgICAgICB1bm1vdW50T25FeGl0XG4gICAgICAgIHRpbWVvdXQ9e3RyYW5zaXRpb25EdXJhdGlvbk1zfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtzdGF0ZSA9PiAoXG4gICAgICAgICAgPFRvYXN0RWxlbWVudCBhcHBlYXJhbmNlPXthcHBlYXJhbmNlfSB0cmFuc2l0aW9uU3RhdGU9e3N0YXRlfT5cbiAgICAgICAgICAgIDxJY29uIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IGF1dG9EaXNtaXNzPXthdXRvRGlzbWlzc30gLz5cbiAgICAgICAgICAgIDxDb250ZW50PntjaGlsZHJlbn08L0NvbnRlbnQ+XG4gICAgICAgICAgICB7b25EaXNtaXNzID8gKFxuICAgICAgICAgICAgICA8QnV0dG9uIG9uQ2xpY2s9e29uRGlzbWlzc30gcm9sZT1cImJ1dHRvblwiPlxuICAgICAgICAgICAgICAgIDxDbG9zZUljb24gLz5cbiAgICAgICAgICAgICAgICA8QTExeVRleHQ+Q2xvc2U8L0ExMXlUZXh0PlxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICAgIDwvVG9hc3RFbGVtZW50PlxuICAgICAgICApfVxuICAgICAgPC9UcmFuc2l0aW9uPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */');

var ToastContainer = exports.ToastContainer = function ToastContainer(_ref5) {
  var children = _ref5.children;
  return _react2.default.createElement(
    'div',
    {
      className: (0, _emotion.css)({
        boxSizing: 'border-box',
        maxHeight: '100%',
        overflowX: 'hidden',
        overflowY: 'auto',
        padding: gutter,
        pointerEvents: _react.Children.count(children) ? 'auto' : 'none',
        position: 'fixed',
        right: 0,
        top: 0,
        width: toastWidth + gutter * 2
      }, '\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zdHlsZWQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUlJIiwiZmlsZSI6Ii4uL3NyYy9zdHlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ2hpbGRyZW4sIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQsIHsga2V5ZnJhbWVzIH0gZnJvbSAncmVhY3QtZW1vdGlvbic7XG5pbXBvcnQgeyBUcmFuc2l0aW9uLCBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcblxuaW1wb3J0IHsgQ2hlY2tJY29uLCBGbGFtZUljb24sIEluZm9JY29uLCBDbG9zZUljb24gfSBmcm9tICcuL2ljb25zJztcblxuY29uc3QgYm9yZGVyUmFkaXVzID0gNDtcbmNvbnN0IGd1dHRlciA9IDg7XG5jb25zdCBhdXRvRGlzbWlzc0R1cmF0aW9uID0gNTAwMDtcbmNvbnN0IHRvYXN0V2lkdGggPSAzNjA7XG5jb25zdCBzaHJpbmsgPSBrZXlmcmFtZXNgZnJvbSB7IGhlaWdodDogMTAwJTsgfSB0byB7IGhlaWdodDogMCUgfWA7XG5cbmNvbnN0IEExMXlUZXh0ID0gKHsgdGFnOiBUYWcsIC4uLnByb3BzIH0pID0+IChcbiAgPFRhZ1xuICAgIGNzcz17e1xuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIHdpZHRoOiAxLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcbkExMXlUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgdGFnOiAnc3BhbicsXG59O1xuXG5jb25zdCBhcHBlYXJhbmNlcyA9IHtcbiAgc3VjY2Vzczoge1xuICAgIGljb246IENoZWNrSWNvbixcbiAgICB0ZXh0OiAncmdiKDMxLCAxMTYsIDM4KScsXG4gICAgZmc6ICdyZ2IoNTIsIDE5NCwgNjQpJyxcbiAgICBiZzogJ3JnYigxOTQsIDIzNywgMTk4KScsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgaWNvbjogRmxhbWVJY29uLFxuICAgIHRleHQ6ICdyZ2IoMTI4LCA0MCwgNDApJyxcbiAgICBmZzogJ3JnYigyMTQsIDY2LCA2NiknLFxuICAgIGJnOiAncmdiKDI0MywgMTk4LCAxOTgpJyxcbiAgfSxcbiAgaW5mbzoge1xuICAgIGljb246IEluZm9JY29uLFxuICAgIHRleHQ6ICdyZ2IoMTA4LDEyMSwxNDMpJyxcbiAgICBmZzogJ3JnYig4MSwgMTU3LCAyNTUpJyxcbiAgICBiZzogJ3doaXRlJyxcbiAgfSxcbn07XG5cbmNvbnN0IEJ1dHRvbiA9IHN0eWxlZC5kaXYoe1xuICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgZmxleFNocmluazogMCxcbiAgb3BhY2l0eTogMC41LFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxuICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHsgb3BhY2l0eTogMSB9LFxufSk7XG5cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2KHtcbiAgZmxleEdyb3c6IDEsXG4gIGZvbnRTaXplOiAxNCxcbiAgbGluZUhlaWdodDogMS40LFxuICBtaW5IZWlnaHQ6IDQwLFxuICBwYWRkaW5nOiBgJHtndXR0ZXJ9cHggJHtndXR0ZXIgKiAxLjV9cHhgLFxufSk7XG5cbi8vIE5PVEU6IGludm9rZSBhbmltYXRpb24gd2hlbiBOT1QgYGF1dG9EaXNtaXNzYCB3aXRoIG9wYWNpdHkgb2YgMCB0byBhdm9pZCBhXG4vLyBwYWludCBidWcgaW4gRmlyZUZveC5cbi8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYyNTI4OVxuY29uc3QgQ291bnRkb3duID0gc3R5bGVkLmRpdigoeyBvcGFjaXR5IH0pID0+ICh7XG4gIGFuaW1hdGlvbjogYCR7c2hyaW5rfSAke2F1dG9EaXNtaXNzRHVyYXRpb259bXMgbGluZWFyYCxcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjEpJyxcbiAgYm90dG9tOiAwLFxuICBoZWlnaHQ6IDAsXG4gIGxlZnQ6IDAsXG4gIG9wYWNpdHksXG4gIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICB3aWR0aDogJzEwMCUnLFxufSkpO1xuY29uc3QgSWNvbiA9ICh7IGFwcGVhcmFuY2UsIGF1dG9EaXNtaXNzIH0pID0+IHtcbiAgY29uc3QgbWV0YSA9IGFwcGVhcmFuY2VzW2FwcGVhcmFuY2VdO1xuICBjb25zdCBHbHlwaCA9IG1ldGEuaWNvbjtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNzcz17e1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG1ldGEuZmcsXG4gICAgICAgIGJvcmRlclRvcExlZnRSYWRpdXM6IGJvcmRlclJhZGl1cyxcbiAgICAgICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogYm9yZGVyUmFkaXVzLFxuICAgICAgICBjb2xvcjogbWV0YS5iZyxcbiAgICAgICAgZmxleFNocmluazogMCxcbiAgICAgICAgcGFkZGluZ0JvdHRvbTogZ3V0dGVyLFxuICAgICAgICBwYWRkaW5nVG9wOiBndXR0ZXIsXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIHdpZHRoOiAzMCxcbiAgICAgIH19XG4gICAgPlxuICAgICAgPENvdW50ZG93biBvcGFjaXR5PXthdXRvRGlzbWlzcyA/IDEgOiAwfSAvPlxuICAgICAgPEdseXBoIGNzcz17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgekluZGV4OiAxIH19IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuY29uc3QgdG9hc3RTdGF0ZXMgPSB7XG4gIGVudGVyaW5nOiB7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZTNkKDExMCUsMCwwKScgfSxcbiAgZW50ZXJlZDogeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLDAsMCknIH0sXG4gIGV4aXRpbmc6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxuICBleGl0ZWQ6IHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoMTEwJSwwLDApJyB9LFxufTtcbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbk1zID0gMjIwO1xuY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7dHJhbnNpdGlvbkR1cmF0aW9uTXN9bXNgO1xuY29uc3QgVG9hc3RFbGVtZW50ID0gc3R5bGVkLmRpdigoeyBhcHBlYXJhbmNlLCB0cmFuc2l0aW9uU3RhdGUgfSkgPT4gKHtcbiAgYmFja2dyb3VuZENvbG9yOiBhcHBlYXJhbmNlc1thcHBlYXJhbmNlXS5iZyxcbiAgYm9yZGVyUmFkaXVzLFxuICBib3hTaGFkb3c6ICcwIDNweCA4cHggcmdiYSgwLCAwLCAwLCAwLjE3NSknLFxuICBjb2xvcjogYXBwZWFyYW5jZXNbYXBwZWFyYW5jZV0udGV4dCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBtYXJnaW5Cb3R0b206IGd1dHRlcixcbiAgdHJhbnNpdGlvbjogYHRyYW5zZm9ybSAke3RyYW5zaXRpb25EdXJhdGlvbn0gY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlgLFxuICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgxMTAlLDAsMCknLFxuICB3aWR0aDogdG9hc3RXaWR0aCxcbiAgLi4udG9hc3RTdGF0ZXNbdHJhbnNpdGlvblN0YXRlXSxcbn0pKTtcblxuZXhwb3J0IGNvbnN0IFRvYXN0Q29udGFpbmVyID0gKHsgY2hpbGRyZW4gfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnLFxuICAgICAgb3ZlcmZsb3dYOiAnaGlkZGVuJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgcGFkZGluZzogZ3V0dGVyLFxuICAgICAgcG9pbnRlckV2ZW50czogQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICByaWdodDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiB0b2FzdFdpZHRoICsgZ3V0dGVyICogMixcbiAgICB9fVxuICA+XG4gICAgPFRyYW5zaXRpb25Hcm91cCBjb21wb25lbnQ9e251bGx9PntjaGlsZHJlbn08L1RyYW5zaXRpb25Hcm91cD5cbiAgPC9kaXY+XG4pO1xuXG50eXBlIEFwcGVhcmFuY2UgPSAkS2V5czx0eXBlb2YgYXBwZWFyYW5jZXM+O1xudHlwZSBQcm9wcyA9IHtcbiAgYXBwZWFyYW5jZTogQXBwZWFyYW5jZSxcbiAgYXV0b0Rpc21pc3M6IGJvb2xlYW4sXG4gIGNoaWxkcmVuOiBOb2RlLFxuICBvbkRpc21pc3M6IEV2ZW50ID0+ICosXG59O1xuXG5leHBvcnQgY2xhc3MgVG9hc3QgZXh0ZW5kcyBDb21wb25lbnQ8UHJvcHM+IHtcbiAgdGltZW91dDogbnVtYmVyO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIGF1dG9EaXNtaXNzOiBmYWxzZSxcbiAgfTtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyBhdXRvRGlzbWlzcywgb25EaXNtaXNzIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChhdXRvRGlzbWlzcykge1xuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChvbkRpc21pc3MsIGF1dG9EaXNtaXNzRHVyYXRpb24pO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcGVhcmFuY2UsXG4gICAgICBhdXRvRGlzbWlzcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgb25EaXNtaXNzLFxuICAgICAgLi4ucHJvcHNcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8VHJhbnNpdGlvblxuICAgICAgICBhcHBlYXJcbiAgICAgICAgbW91bnRPbkVudGVyXG4gICAgICAgIHVubW91bnRPbkV4aXRcbiAgICAgICAgdGltZW91dD17dHJhbnNpdGlvbkR1cmF0aW9uTXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge3N0YXRlID0+IChcbiAgICAgICAgICA8VG9hc3RFbGVtZW50IGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9IHRyYW5zaXRpb25TdGF0ZT17c3RhdGV9PlxuICAgICAgICAgICAgPEljb24gYXBwZWFyYW5jZT17YXBwZWFyYW5jZX0gYXV0b0Rpc21pc3M9e2F1dG9EaXNtaXNzfSAvPlxuICAgICAgICAgICAgPENvbnRlbnQ+e2NoaWxkcmVufTwvQ29udGVudD5cbiAgICAgICAgICAgIHtvbkRpc21pc3MgPyAoXG4gICAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17b25EaXNtaXNzfSByb2xlPVwiYnV0dG9uXCI+XG4gICAgICAgICAgICAgICAgPENsb3NlSWNvbiAvPlxuICAgICAgICAgICAgICAgIDxBMTF5VGV4dD5DbG9zZTwvQTExeVRleHQ+XG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPC9Ub2FzdEVsZW1lbnQ+XG4gICAgICAgICl9XG4gICAgICA8L1RyYW5zaXRpb24+XG4gICAgKTtcbiAgfVxufVxuIl19 */')
    },
    _react2.default.createElement(
      _reactTransitionGroup.TransitionGroup,
      { component: null },
      children
    )
  );
};

var Toast = exports.Toast = function (_Component) {
  _inherits(Toast, _Component);

  function Toast() {
    _classCallCheck(this, Toast);

    return _possibleConstructorReturn(this, (Toast.__proto__ || Object.getPrototypeOf(Toast)).apply(this, arguments));
  }

  _createClass(Toast, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          autoDismiss = _props.autoDismiss,
          onDismiss = _props.onDismiss;

      if (autoDismiss) {
        this.timeout = setTimeout(onDismiss, autoDismissDuration);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          appearance = _props2.appearance,
          autoDismiss = _props2.autoDismiss,
          children = _props2.children,
          onDismiss = _props2.onDismiss,
          props = _objectWithoutProperties(_props2, ['appearance', 'autoDismiss', 'children', 'onDismiss']);

      return _react2.default.createElement(
        _reactTransitionGroup.Transition,
        _extends({
          appear: true,
          mountOnEnter: true,
          unmountOnExit: true,
          timeout: transitionDurationMs
        }, props),
        function (state) {
          return _react2.default.createElement(
            ToastElement,
            { appearance: appearance, transitionState: state },
            _react2.default.createElement(Icon, { appearance: appearance, autoDismiss: autoDismiss }),
            _react2.default.createElement(
              Content,
              null,
              children
            ),
            onDismiss ? _react2.default.createElement(
              Button,
              { onClick: onDismiss, role: 'button' },
              _react2.default.createElement(_icons.CloseIcon, null),
              _react2.default.createElement(
                A11yText,
                null,
                'Close'
              )
            ) : null
          );
        }
      );
    }
  }]);

  return Toast;
}(_react.Component);

Toast.defaultProps = {
  autoDismiss: false
};