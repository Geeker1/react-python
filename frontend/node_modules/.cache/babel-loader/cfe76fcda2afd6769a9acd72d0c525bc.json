{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { update, fetchupdate } from '../actions/notes';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nvar PostEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostEdit, _Component);\n\n  function PostEdit(props) {\n    var _this;\n\n    _classCallCheck(this, PostEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostEdit).call(this, props));\n    _this.code = {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: [{\n        a: 'hello'\n      }, {\n        a: 'hi'\n      }, {\n        a: 'how'\n      }, {\n        a: 'where'\n      }]\n    };\n    _this.indi = _this.indi.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PostEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.fetchupdate(pk, function () {\n        _this2.setState({\n          initialValues: {\n            name: 'name',\n            heading: 'heading',\n            description: 'woah'\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var name = this.props.post.name;\n      console.log(field);\n      console.log(this.state);\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, touched ? error : '')));\n    }\n  }, {\n    key: \"indi\",\n    value: function indi() {\n      var d = this.code.d;\n      return _.map(d, function (p) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, p.a);\n      });\n    } // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this3 = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.update(pk, values, function () {\n        _this3.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          post = _this$props.post;\n\n      if (!post) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        // dis is pulled from the form helper that is included in content\n        console.log(this.props);\n        var _this$props$post = this.props.post,\n            name = _this$props$post.name,\n            heading = _this$props$post.heading,\n            description = _this$props$post.description;\n        var _this$code = this.code,\n            a = _this$code.a,\n            b = _this$code.b,\n            c = _this$code.c,\n            d = _this$code.d;\n\n        var a1 = _.random(1, 100);\n\n        var b1 = _.random(1.5, 20.0);\n\n        var c1 = _.random(0, 30);\n\n        var d1 = _.range(0, -4, -1);\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, \"Edit \", name, \" post\"), React.createElement(\"form\", {\n          className: \"px-2\",\n          onSubmit: handleSubmit(this.onSubmit.bind(this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(Field, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          valu: name,\n          placeholder: \"Name\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Heading\",\n          name: \"heading\",\n          type: \"text\",\n          valu: heading,\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Description\",\n          name: \"description\",\n          valu: description,\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary rounded-0 my-3 mx-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, \"Submit\"), React.createElement(Link, {\n          to: \"/posts\",\n          className: \"btn btn-success rounded-0 mx-2 my-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, \"Cancel\")), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        }, \"Toggle values:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, \"a: \", a), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, \"b: \", b), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, \"c: \", c), React.createElement(\"button\", {\n          className: \"btn btn-warning rounded-0 m-2\",\n          onClick: function onClick() {\n            _this4.setState({\n              a: a1,\n              b: b1,\n              c: c1,\n              d: d1\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, \"Toggle states\"), this.indi());\n      }\n    }\n  }]);\n\n  return PostEdit;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nvar codeine = {\n  name: 'posts[ownProps.match.params.pk].name',\n  heading: 'posts[ownProps.match.params.pk].heading',\n  description: 'posts[ownProps.match.params.pk].description'\n};\n\nfunction mapStateToProps(_ref, ownProps) {\n  var posts = _ref.posts;\n  return {\n    post: posts[ownProps.match.params.pk]\n  };\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, {\n  update: update,\n  fetchupdate: fetchupdate\n})(PostEdit));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js"],"names":["React","Component","Field","reduxForm","Link","connect","update","fetchupdate","_","PropTypes","PostEdit","props","code","a","b","c","d","indi","bind","pk","match","params","setState","initialValues","name","heading","description","field","meta","touched","error","post","console","log","state","className","label","type","input","map","p","values","history","push","reset","handleSubmit","a1","random","b1","c1","d1","range","onSubmit","renderField","validate","errors","codeine","mapStateToProps","ownProps","posts","form"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,kBAApC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,Q;;;;;AACJ,oBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAClB,kFAAMA,KAAN;AACA,UAAKC,IAAL,GAAY;AACVC,MAAAA,CAAC,EAAE,CADO;AAEVC,MAAAA,CAAC,EAAE,CAFO;AAGVC,MAAAA,CAAC,EAAE,CAHO;AAIVC,MAAAA,CAAC,EAAE,CAAC;AAAEH,QAAAA,CAAC,EAAE;AAAL,OAAD,EAAiB;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAAjB,EAA8B;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAA9B,EAA4C;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAA5C;AAJO,KAAZ;AAOA,UAAKI,IAAL,GAAY,MAAKA,IAAL,CAAUC,IAAV,uDAAZ;AATkB;AAUnB;;;;wCAEoB;AAAA;;AAAA,UACXC,EADW,GACJ,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MADb,CACXF,EADW;AAEnB,WAAKR,KAAL,CAAWJ,WAAX,CAAuBY,EAAvB,EAA2B,YAAM;AAC/B,QAAA,MAAI,CAACG,QAAL,CAAc;AAAEC,UAAAA,aAAa,EAC7B;AACEC,YAAAA,IAAI,EAAE,MADR;AAEEC,YAAAA,OAAO,EAAE,SAFX;AAGEC,YAAAA,WAAW,EAAE;AAHf;AADc,SAAd;AAMD,OAPD;AAQD;;;gCAEYC,K,EAAO;AAAA,wBACmBA,KADnB,CACVC,IADU;AAAA,UACFC,OADE,eACFA,OADE;AAAA,UACOC,KADP,eACOA,KADP;AAAA,UAEVN,IAFU,GAED,KAAKb,KAAL,CAAWoB,IAFV,CAEVP,IAFU;AAGlBQ,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACA,UAAMC,SAAS,wBAAiBN,OAAO,IAAIC,KAAX,GAAmB,YAAnB,GAC5BD,OAAO,IAAI,CAACC,KAAZ,GAAoB,UAApB,GAAiC,EADtB,CAAf,CALkB,CAQlB;AACA;;AACA,aACE;AAAK,QAAA,SAAS,EAAEK,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQR,KAAK,CAACS,KAAd,CADF,EAEE;AACE,QAAA,SAAS,EAAC,wBADZ;AAEE,QAAA,IAAI,YAAKT,KAAK,CAACU,IAAX;AAFN,SAGMV,KAAK,CAACW,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAOE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQT,OAAO,GAAGC,KAAH,GAAW,EAA1B,CADF,CAPF,CADF;AAaD;;;2BAEO;AAAA,UACEd,CADF,GACQ,KAAKJ,IADb,CACEI,CADF;AAEN,aAAOR,CAAC,CAAC+B,GAAF,CAAMvB,CAAN,EAAS,UAACwB,CAAD,EAAO;AACrB,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIA,CAAC,CAAC3B,CAAN,CAAR;AACD,OAFM,CAAP;AAGD,K,CAED;AACA;AACA;;;;6BAEU4B,M,EAAQ;AAAA;;AAAA,UACRtB,EADQ,GACD,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,MADhB,CACRF,EADQ;AAEhB,WAAKR,KAAL,CAAWL,MAAX,CAAkBa,EAAlB,EAAsBsB,MAAtB,EAA8B,YAAM;AAClC,QAAA,MAAI,CAAC9B,KAAL,CAAW+B,OAAX,CAAmBC,IAAnB,CAAwB,SAAxB;AACD,OAFD;AAGA,WAAKhC,KAAL,CAAWiC,KAAX;AACD;;;6BAES;AAAA;;AACR;AACA;AACA;AAHQ,wBAKuB,KAAKjC,KAL5B;AAAA,UAKAkC,YALA,eAKAA,YALA;AAAA,UAKcd,IALd,eAKcA,IALd;;AAMR,UAAI,CAACA,IAAL,EAAW;AACT,eAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAR;AACD,OAFD,MAEO;AACL;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAjB;AAFK,+BAGkC,KAAKA,KAAL,CAAWoB,IAH7C;AAAA,YAGGP,IAHH,oBAGGA,IAHH;AAAA,YAGSC,OAHT,oBAGSA,OAHT;AAAA,YAGkBC,WAHlB,oBAGkBA,WAHlB;AAAA,yBAIkB,KAAKd,IAJvB;AAAA,YAIGC,CAJH,cAIGA,CAJH;AAAA,YAIMC,CAJN,cAIMA,CAJN;AAAA,YAISC,CAJT,cAISA,CAJT;AAAA,YAIYC,CAJZ,cAIYA,CAJZ;;AAKL,YAAI8B,EAAE,GAAGtC,CAAC,CAACuC,MAAF,CAAS,CAAT,EAAY,GAAZ,CAAT;;AACA,YAAIC,EAAE,GAAGxC,CAAC,CAACuC,MAAF,CAAS,GAAT,EAAc,IAAd,CAAT;;AACA,YAAIE,EAAE,GAAGzC,CAAC,CAACuC,MAAF,CAAS,CAAT,EAAY,EAAZ,CAAT;;AACA,YAAIG,EAAE,GAAG1C,CAAC,CAAC2C,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,EAAe,CAAC,CAAhB,CAAT;;AAEA,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAI,UAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkC3B,IAAlC,UADF,EAEE;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAuB,UAAA,QAAQ,EAAEqB,YAAY,CAAC,KAAKO,QAAL,CAAclC,IAAd,CAAmB,IAAnB,CAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,IAAI,EAAEM,IAJR;AAKE,UAAA,WAAW,EAAC,MALd;AAME,UAAA,SAAS,EAAE,KAAK6B,WAAL,CAAiBnC,IAAjB,CAAsB,IAAtB,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EASE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAC,SADR;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,IAAI,EAAEO,OAJR;AAKE,UAAA,SAAS,EAAE,KAAK4B,WAAL,CAAiBnC,IAAjB,CAAsB,IAAtB,CALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATF,EAgBE,oBAAC,KAAD;AACE,UAAA,KAAK,EAAC,aADR;AAEE,UAAA,IAAI,EAAC,aAFP;AAGE,UAAA,IAAI,EAAEQ,WAHR;AAIE,UAAA,SAAS,EAAE,KAAK2B,WAAL,CAAiBnC,IAAjB,CAAsB,IAAtB,CAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAhBF,EAuBE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAC,qCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAvBF,EAwBE,oBAAC,IAAD;AAAM,UAAA,EAAE,EAAC,QAAT;AAAkB,UAAA,SAAS,EAAC,qCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxBF,CAFF,EA6BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA7BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAOL,CAAP,CA9BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAOC,CAAP,CA/BF,EAgCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAOC,CAAP,CAhCF,EAiCE;AACE,UAAA,SAAS,EAAC,+BADZ;AAEE,UAAA,OAAO,EAAE,mBAAM;AAAE,YAAA,MAAI,CAACO,QAAL,CAAc;AAAET,cAAAA,CAAC,EAAEiC,EAAL;AAAShC,cAAAA,CAAC,EAAEkC,EAAZ;AAAgBjC,cAAAA,CAAC,EAAEkC,EAAnB;AAAuBjC,cAAAA,CAAC,EAAEkC;AAA1B,aAAd;AAA+C,WAFlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAjCF,EAsCG,KAAKjC,IAAL,EAtCH,CAFF;AA4CD;AACF;;;;EApIoBhB,S,GAuIvB;AACA;AACA;;;AACA,SAASqD,QAAT,CAAmBb,MAAnB,EAA2B;AACzB;AACA;AACA,MAAMc,MAAM,GAAG,EAAf,CAHyB,CAIzB;;AAEA,MAAI,CAACd,MAAM,CAACjB,IAAZ,EAAkB;AAChB+B,IAAAA,MAAM,CAAC/B,IAAP,GAAc,cAAd;AACD;;AAED,MAAI,CAACiB,MAAM,CAAChB,OAAZ,EAAqB;AACnB8B,IAAAA,MAAM,CAAC9B,OAAP,GAAiB,iBAAjB;AACD;;AAED,MAAI,CAACgB,MAAM,CAACf,WAAZ,EAAyB;AACvB6B,IAAAA,MAAM,CAAC7B,WAAP,GAAqB,qBAArB;AACD,GAhBwB,CAkBzB;AACA;AACA;AAEA;AACA;;;AACA,SAAO6B,MAAP;AACD;;AAED,IAAIC,OAAO,GAAG;AACZhC,EAAAA,IAAI,EAAE,sCADM;AAEZC,EAAAA,OAAO,EAAE,yCAFG;AAGZC,EAAAA,WAAW,EAAE;AAHD,CAAd;;AAMA,SAAS+B,eAAT,OAAqCC,QAArC,EAA+C;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAC7C,SAAO;AAAE5B,IAAAA,IAAI,EAAE4B,KAAK,CAACD,QAAQ,CAACtC,KAAT,CAAeC,MAAf,CAAsBF,EAAvB;AAAb,GAAP;AACD;;AAED,eAAehB,SAAS,CAAC;AACvBmD,EAAAA,QAAQ,EAARA,QADuB;AACb;AACVM,EAAAA,IAAI,EAAE;AAFiB,CAAD,CAAT,CAGZvD,OAAO,CAACoD,eAAD,EAAkB;AAAEnD,EAAAA,MAAM,EAANA,MAAF;AAAUC,EAAAA,WAAW,EAAXA;AAAV,CAAlB,CAAP,CAAkDG,QAAlD,CAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { update, fetchupdate } from '../actions/notes'\nimport _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nclass PostEdit extends Component {\n  constructor (props) {\n    super(props)\n    this.code = {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: [{ a: 'hello' }, { a: 'hi' }, { a: 'how' }, { a: 'where' }]\n\n    }\n    this.indi = this.indi.bind(this)\n  }\n\n  componentDidMount () {\n    const { pk } = this.props.match.params\n    this.props.fetchupdate(pk, () => {\n      this.setState({ initialValues:\n      {\n        name: 'name',\n        heading: 'heading',\n        description: 'woah'\n      } })\n    })\n  }\n\n  renderField (field) {\n    const { meta: { touched, error } } = field\n    const { name } = this.props.post\n    console.log(field)\n    console.log(this.state)\n    const className = `form-group ${touched && error ? 'has-danger'\n      : touched && !error ? 'has-none' : ''}`\n\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n        <div className='text-danger text-center'>\n          <small>{touched ? error : ''}</small>\n        </div>\n      </div>\n    )\n  }\n\n  indi () {\n    const { d } = this.code\n    return _.map(d, (p) => {\n      return (<p>{p.a}</p>)\n    })\n  }\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n    const { pk } = this.props.match.params\n    this.props.update(pk, values, () => {\n      this.props.history.push('/posts/')\n    })\n    this.props.reset()\n  }\n\n  render () {\n    // In using redux form the submit function is not really handled\n    // by redux-form so we have to involve redux-form in the submittal\n    //\n\n    const { handleSubmit, post } = this.props\n    if (!post) {\n      return (<h3>Loading...</h3>)\n    } else {\n      // dis is pulled from the form helper that is included in content\n      console.log(this.props)\n      const { name, heading, description } = this.props.post\n      const { a, b, c, d } = this.code\n      let a1 = _.random(1, 100)\n      let b1 = _.random(1.5, 20.0)\n      let c1 = _.random(0, 30)\n      let d1 = _.range(0, -4, -1)\n\n      return (\n\n        <div>\n          <h4 className='text-center'>Edit {name} post</h4>\n          <form className='px-2' onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n            <Field\n              label='Name'\n              name='name'\n              type='text'\n              valu={name}\n              placeholder='Name'\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Heading'\n              name='heading'\n              type='text'\n              valu={heading}\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Description'\n              name='description'\n              valu={description}\n              component={this.renderField.bind(this)}\n            />\n\n            <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n            <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n\n          </form>\n          <h6>Toggle values:</h6>\n          <p>a: {a}</p>\n          <p>b: {b}</p>\n          <p>c: {c}</p>\n          <button\n            className='btn btn-warning rounded-0 m-2'\n            onClick={() => { this.setState({ a: a1, b: b1, c: c1, d: d1 }) }}>\n              Toggle states\n          </button>\n          {this.indi()}\n\n        </div>\n      )\n    }\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nlet codeine = {\n  name: 'posts[ownProps.match.params.pk].name',\n  heading: 'posts[ownProps.match.params.pk].heading',\n  description: 'posts[ownProps.match.params.pk].description'\n}\n\nfunction mapStateToProps ({ posts }, ownProps) {\n  return { post: posts[ownProps.match.params.pk] }\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, { update, fetchupdate })(PostEdit))\n"]},"metadata":{},"sourceType":"module"}