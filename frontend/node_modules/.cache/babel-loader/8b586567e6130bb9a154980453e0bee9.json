{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createpost } from '../actions/notes';\nimport { FaBitcoin, FaPaperPlane } from 'react-icons/fa';\nimport classNames from 'classnames';\nimport Dropzone from 'react-dropzone';\n\nvar PostsNew =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostsNew, _Component);\n\n  function PostsNew() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PostsNew);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PostsNew)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onDrop = function (acceptedFiles, rejectedFiles) {\n      alert('Dropped files!!!');\n    };\n\n    return _this;\n  }\n\n  _createClass(PostsNew, [{\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, touched ? error : '')));\n    } // different states of your form\n    // a. pristine( no  input yet)\n    // b. touched()\n    // c. invalid\n    // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this2 = this;\n\n      this.props.createpost(values, function () {\n        _this2.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var handleSubmit = this.props.handleSubmit; // dis is pulled from the form helper that is included in content\n\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        className: \"login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container text-center pt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Hello, create a new post here\"), React.createElement(\"div\", {\n        className: \"row pt-5 justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"col-sm-5 bg-dark text-white text-center rounded col-md-6 p-3\",\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Heading\",\n        name: \"heading\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Description\",\n        name: \"description\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(Dropzone, {\n        onDrop: this.onDrop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, function (_ref) {\n        var getRootProps = _ref.getRootProps,\n            getInputProps = _ref.getInputProps,\n            isDragActive = _ref.isDragActive;\n        return React.createElement(\"div\", Object.assign({}, getRootProps(), {\n          className: classNames('dropzone', {\n            'dropzone--isActive': isDragActive\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        })), isDragActive ? React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"Drop files here...\") : React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"Try dropping files here, or click to select files to upload.\"));\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary rounded-0 my-3 mx-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Submit\", React.createElement(\"span\", {\n        className: \"ml-2 float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(FaPaperPlane, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }))), React.createElement(FaBitcoin, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Link, {\n        to: \"/posts\",\n        className: \"btn btn-success rounded-0 mx-2 my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Cancel\")))));\n    }\n  }]);\n\n  return PostsNew;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(connect(null, {\n  createpost: createpost\n})(PostsNew));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js"],"names":["React","Component","Field","reduxForm","Link","connect","createpost","FaBitcoin","FaPaperPlane","classNames","Dropzone","PostsNew","onDrop","acceptedFiles","rejectedFiles","alert","field","meta","touched","error","className","label","type","input","values","props","history","push","reset","handleSubmit","console","log","onSubmit","bind","renderField","getRootProps","getInputProps","isDragActive","validate","errors","name","heading","description","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { createpost } from '../actions/notes'\nimport { FaBitcoin,FaPaperPlane } from 'react-icons/fa'\nimport classNames from 'classnames'\nimport Dropzone from 'react-dropzone'\n\n\nclass PostsNew extends Component {\n  renderField (field) {\n    const { meta: { touched, error } } = field\n    const className = `form-group ${touched && error ? 'has-danger'\n      : touched && !error ? 'has-none' : ''}`\n\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n        <div className='text-danger'>\n          <small>{touched ? error : ''}</small>\n        </div>\n      </div>\n    )\n  }\n\n\n  \n  // different states of your form\n  // a. pristine( no  input yet)\n  // b. touched()\n  // c. invalid\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n    this.props.createpost(values, () => {\n      this.props.history.push('/posts/')\n    })\n    this.props.reset()\n  }\n\n  onDrop = (acceptedFiles, rejectedFiles) =>{\n    alert('Dropped files!!!')\n  }\n\n  render () {\n    // In using redux form the submit function is not really handled\n    // by redux-form so we have to involve redux-form in the submittal\n    //\n    const { handleSubmit } = this.props\n    // dis is pulled from the form helper that is included in content\n    console.log(this.props)\n    return (\n      <div className='login'>\n        <div className='container text-center pt-5'>\n          <h2 className='text-white'>Hello, create a new post here</h2>\n          <div className='row pt-5 justify-content-center'>\n            <form className='col-sm-5 bg-dark text-white text-center rounded col-md-6 p-3' onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n\n              <Field\n                label='Name'\n                name='name'\n                type='text'\n                component={this.renderField}\n              />\n              <Field\n                label='Heading'\n                name='heading'\n                type='text'\n                component={this.renderField}\n              />\n              <Field\n                label='Description'\n                name='description'\n                type='text'\n                component={this.renderField}\n              />\n              \n              <Dropzone onDrop={this.onDrop}>\n                {\n                  ({getRootProps, getInputProps, isDragActive}) =>{\n                    return (\n                      <div\n                        {...getRootProps()}\n                        className={classNames('dropzone', {'dropzone--isActive': isDragActive})}\n                      >\n                        <input {...getInputProps()}/>\n                        {\n                          isDragActive ? \n                          <p>Drop files here...</p>:\n                          <p>Try dropping files here, or click to select files to upload.</p>\n                        }\n                        \n                      </div>\n                    )\n                  }\n                }\n              </Dropzone>\n              \n              <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>\n              Submit\n              <span className='ml-2 float-right'>\n              <FaPaperPlane/></span></button>\n              <FaBitcoin/>\n              <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n            </form>\n          </div></div></div>\n    )\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(connect(null, { createpost })(PostsNew))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}