{"ast":null,"code":"var _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostRender.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport logo from '../img/puss.jpg';\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\nimport { update } from '../actions/notes';\n\nvar PostRender = function PostRender(_ref) {\n  var post = _ref.post,\n      likes = _ref.likes;\n  var results = post.posts.results,\n      update = post.update,\n      history = post.history,\n      handleSubmit = post.handleSubmit;\n  console.log(post);\n  console.log(update);\n  var border = update;\n  console.log(handleSubmit);\n  var values = {\n    users: ['hello', 'hi']\n  };\n  console.log(results);\n\n  var onSubmit = function onSubmit(values, pk) {\n    border(values, pk);\n    console.log(values);\n  };\n\n  var renderField = function renderField(field) {\n    console.log(field); // field.meta.error is an automatic property added to field object\n    // from validate function\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, field.label), React.createElement(\"input\", Object.assign({\n      className: \"form-control rounded-0\",\n      type: \"\".concat(field.type)\n    }, field.input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    })));\n  };\n\n  var indi = function indi() {\n    return _.map(results, function (post) {\n      return React.createElement(\"div\", {\n        className: \"col-md-4 py-2 col-lg-4\",\n        key: post.pk,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ledum\",\n        onClick: function onClick() {\n          history.push(\"/posts/\".concat(post.pk));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        className: \"h-80 w-100\",\n        src: logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        placeholder: \"Name\",\n        component: renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"my-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, post.name, React.createElement(\"button\", {\n        className: \"btn btn-danger text-right\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"badge badge-secondary float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Like\")))), React.createElement(\"button\", {\n        className: \"btn\",\n        onClick: function onClick() {\n          update(values);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"click me\"));\n    });\n  };\n\n  console.log(indi());\n  return React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, indi());\n};\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n  return errors;\n} // is localStorage in react\n\n\nexport default PostRender;","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostRender.js"],"names":["React","_","logo","Field","reduxForm","connect","update","PostRender","post","likes","results","posts","history","handleSubmit","console","log","border","values","users","onSubmit","pk","renderField","field","label","type","input","indi","map","push","name","validate","errors"],"mappings":"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","sourcesContent":["import React from 'react'\nimport _ from 'lodash'\nimport logo from '../img/puss.jpg'\nimport { Field, reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\nimport { update } from '../actions/notes'\n\nconst PostRender = ({ post, likes }) => {\n  const { posts: { results }, update, history, handleSubmit } = post\n  console.log(post)\n\n  console.log(update)\n  let border = update\n  console.log(handleSubmit)\n  const values = { users: ['hello', 'hi'] }\n  console.log(results)\n\n  const onSubmit = (values, pk) => {\n    border(values, pk)\n    console.log(values)\n  }\n\n  const renderField = (field) => {\n    console.log(field)\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n      </div>\n    )\n  }\n\n  const indi = () => {\n    return _.map(results, post => {\n      return (\n        <div className='col-md-4 py-2 col-lg-4' key={post.pk}>\n          <div className='ledum' onClick={() => { history.push(`/posts/${post.pk}`) }}>\n            <img className='h-80 w-100' src={logo} />\n          </div>\n          <form>\n            <Field\n              label='Name'\n              name='name'\n              type='text'\n              placeholder='Name'\n              component={renderField}\n            />\n            <div className='my-2'>\n              {post.name}\n              <button className='btn btn-danger text-right' type='submit'>\n                <span\n                  className='badge badge-secondary float-right'\n                >Like</span>\n              </button>\n\n            </div>\n          </form>\n\n          <button className='btn' onClick={() => { update(values) }}>click me</button>\n        </div>\n      )\n    })\n  }\n  console.log(indi())\n  return (\n    <div className='row'>\n      {indi()}\n    </div>\n  )\n}\n\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\n// is localStorage in react\n\nexport default PostRender\n"]},"metadata":{},"sourceType":"module"}