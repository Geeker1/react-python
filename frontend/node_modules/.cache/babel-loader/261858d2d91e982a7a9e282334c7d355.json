{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createpost } from '../actions/notes';\n\nvar PostsNew =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostsNew, _Component);\n\n  function PostsNew() {\n    _classCallCheck(this, PostsNew);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostsNew).apply(this, arguments));\n  }\n\n  _createClass(PostsNew, [{\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, touched ? error : '')));\n    }\n  }, {\n    key: \"renderCheckBoxField\",\n    value: function renderCheckBoxField(field) {\n      var _field$meta2 = field.meta,\n          error = _field$meta2.error,\n          touched = _field$meta2.touched;\n      return React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-check\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"form-check-input\",\n        type: \"\".concat(field.type),\n        id: \"gridCheck\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        className: \"form-check-label\",\n        for: \"gridCheck\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Agreed\")));\n    } // different states of your form\n    // a. pristine( no  input yet)\n    // b. touched()\n    // c. invalid\n    // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      console.log(values); // this.props.createpost(values, () => {\n      // this.props.history.push('/posts/')\n      // })\n      // this.props.clearFields()\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var handleSubmit = this.props.handleSubmit; // dis is pulled from the form helper that is included in content\n\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Hello, create a new post here\"), React.createElement(\"form\", {\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Name\",\n        name: \"name\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Heading\",\n        name: \"heading\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Description\",\n        name: \"description\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Agree\",\n        name: \"agree\",\n        type: \"checkbox\",\n        component: this.renderCheckBoxField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary rounded-0 my-3 mx-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(Link, {\n        to: \"/\",\n        className: \"btn btn-success rounded-0 mx-2 my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }]);\n\n  return PostsNew;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(connect(null, {\n  createpost: createpost\n})(PostsNew));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js"],"names":["React","Component","Field","reduxForm","Link","connect","createpost","PostsNew","field","meta","touched","error","className","label","type","input","values","console","log","handleSubmit","props","onSubmit","bind","renderField","renderCheckBoxField","validate","errors","name","heading","description","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { createpost } from '../actions/notes'\nclass PostsNew extends Component {\n  renderField (field) {\n  \tconst { meta: { touched, error } } = field\n  \tconst className = `form-group ${touched && error ? 'has-danger'\n  \t: touched && !error ? 'has-none' : ''}`\n\n  \t// field.meta.error is an automatic property added to field object\n  \t// from validate function\n  \treturn (\n      <div className={className}>\n      <label>{field.label}</label>\n      <input\n          className='form-control'\n          type={`${field.type}`}\n          {...field.input}\n  \t  />\n      <div className='text-danger'>\n          <small>{touched ? error : ''}</small>\n        </div>\n    </div>\n  \t)\n  }\n\n  renderCheckBoxField (field) {\n  \tconst { meta: { error, touched } } = field\n    return (\n      <div className='form-group'>\n        <div className='form-check'>\n          <input className='form-check-input' type={`${field.type}`} id='gridCheck' />\n          <label className='form-check-label' for='gridCheck'>\n        Agreed\n          </label>\n        </div>\n      </div>\n    )\n  }\n\n  // different states of your form\n  // a. pristine( no  input yet)\n  // b. touched()\n  // c. invalid\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n  \tconsole.log(values)\n  \t// this.props.createpost(values, () => {\n  \t\t// this.props.history.push('/posts/')\n  \t// })\n  \t// this.props.clearFields()\n  }\n\n  render () {\n  \t// In using redux form the submit function is not really handled\n  \t// by redux-form so we have to involve redux-form in the submittal\n  \t//\n\n  \tconst { handleSubmit } = this.props\n  \t// dis is pulled from the form helper that is included in content\n  \tconsole.log(this.props)\n    return (\n      <div>\n        <h2>Hello, create a new post here</h2>\n        <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n          <Field\n            label='Name'\n            name='name'\n            type='text'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Heading'\n            name='heading'\n            type='text'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Description'\n            name='description'\n            type='text'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Agree'\n            name='agree'\n            type='checkbox'\n            component={this.renderCheckBoxField}\n    \t\t/>\n          <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n          <Link to='/' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n        </form>\n      </div>\n    )\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(connect(null, { createpost })(PostsNew))\n"]},"metadata":{},"sourceType":"module"}