{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nvar PostsNew =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostsNew, _Component);\n\n  function PostsNew() {\n    _classCallCheck(this, PostsNew);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostsNew).apply(this, arguments));\n  }\n\n  _createClass(PostsNew, [{\n    key: \"renderField\",\n    value: function renderField(field) {\n      // field.meta.error is an automatic property added to field object\n      // from validate function\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control\",\n        type: \"text\"\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      })), field.meta.error);\n    } // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \"Hello, create a new post here\"), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Name\",\n        name: \"name\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Heading\",\n        name: \"heading\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Description\",\n        name: \"description\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btn btn-success rounded-0 mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }]);\n\n  return PostsNew;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(PostsNew);","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostsNew.js"],"names":["React","Component","Field","reduxForm","PostsNew","field","label","input","meta","error","renderField","validate","values","errors","name","heading","description","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;;IAEMC,Q;;;;;;;;;;;;;gCACSC,K,EAAO;AACnB;AACA;AACA,aACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQA,KAAK,CAACC,KAAd,CADA,EAEA;AACI,QAAA,SAAS,EAAC,cADd;AAEI,QAAA,IAAI,EAAC;AAFT,SAGQD,KAAK,CAACE,KAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFA,EAOCF,KAAK,CAACG,IAAN,CAAWC,KAPZ,CADH;AAYA,K,CAED;AACA;AACA;;;;6BAEU;AACR,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,MADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,SAAS,EAAE,KAAKC,WAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,SADR;AAEE,QAAA,IAAI,EAAC,SAFP;AAGE,QAAA,SAAS,EAAE,KAAKA,WAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,EAWE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,aADR;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,SAAS,EAAE,KAAKA,WAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXF,EAgBE;AAAQ,QAAA,SAAS,EAAC,gCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,CAFF,CADF;AAuBD;;;;EA9CoBT,S,GAiDvB;AACA;AACA;;;AACA,SAASU,QAAT,CAAmBC,MAAnB,EAA2B;AACzB;AACA;AACA,MAAMC,MAAM,GAAG,EAAf,CAHyB,CAIzB;;AAEA,MAAI,CAACD,MAAM,CAACE,IAAZ,EAAkB;AAChBD,IAAAA,MAAM,CAACC,IAAP,GAAc,cAAd;AACD;;AAED,MAAI,CAACF,MAAM,CAACG,OAAZ,EAAqB;AACnBF,IAAAA,MAAM,CAACE,OAAP,GAAiB,iBAAjB;AACD;;AAED,MAAI,CAACH,MAAM,CAACI,WAAZ,EAAyB;AACvBH,IAAAA,MAAM,CAACG,WAAP,GAAqB,qBAArB;AACD,GAhBwB,CAkBzB;AACA;;;AACA,SAAOH,MAAP;AACD;;AAED,eAAeV,SAAS,CAAC;AACvBQ,EAAAA,QAAQ,EAARA,QADuB;AACb;AACVM,EAAAA,IAAI,EAAE;AAFiB,CAAD,CAAT,CAGZb,QAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\n\nclass PostsNew extends Component {\n  renderField (field) {\n  \t// field.meta.error is an automatic property added to field object\n  \t// from validate function\n  \treturn (\n      <div>\n      <label>{field.label}</label>\n      <input\n          className='form-control'\n          type='text'\n          {...field.input}\n  \t  />\n      {field.meta.error}\n\n    </div>\n  \t)\n  }\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  render () {\n    return (\n      <div>\n        <h2>Hello, create a new post here</h2>\n        <form>\n          <Field\n            label='Name'\n            name='name'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Heading'\n            name='heading'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Description'\n            name='description'\n            component={this.renderField}\n    \t\t/>\n          <button className='btn btn-success rounded-0 mt-3'>Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostsNewForm'\n})(PostsNew)\n"]},"metadata":{},"sourceType":"module"}