{"ast":null,"code":"import axios from 'axios';\nexport var FETCH_POSTS = 'fetch_posts';\nexport var CREATE_POST = 'create_posts';\nexport var FETCH_POST = 'fetchpost';\nexport var DELETE_POST = 'deletePost';\nexport var FETCH_POST_UPDATE = 'fetchpostupdate';\nexport var UPDATE = 'update';\nvar API_URL = 'http://localhost:8000'; // export function fetchposts (link) {\n//   let request = axios.get(`${API_URL}/api/posts`)\n//   if (link) {\n//     request = axios.get(`${link}`)\n//   } else {\n//     request = axios.get(`${API_URL}/api/posts`)\n//   }\n//   return {\n//     type: FETCH_POSTS,\n//     payload: request\n//   }\n// }\n\nexport function togg(pk, values, callback) {\n  console.log(values);\n  var request = axios.put(\"\".concat(API_URL, \"/router/posts/\").concat(pk, \"/like/\"), values, {\n    headers: {\n      Authorization: \"JWT \".concat(tokenize)\n    }\n  });\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      console.log(response);\n      dispatch({\n        type: UPDATE,\n        payload: response\n      });\n    }).then(function () {\n      return callback();\n    }).catch(function (_ref) {\n      var response = _ref.response;\n      console.log(response.data);\n    });\n  };\n}\nexport function fetchposts(link) {\n  var request = axios.get(\"\".concat(API_URL, \"/api/posts\"));\n\n  if (link) {\n    request = axios.get(\"\".concat(link));\n  } else {\n    request = axios.get(\"\".concat(API_URL, \"/api/posts\"));\n  }\n\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      dispatch({\n        type: FETCH_POSTS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function createpost(values, callback) {\n  var request = axios.post(\"\".concat(API_URL, \"/api/posts\"), values);\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      dispatch({\n        type: CREATE_POST,\n        payload: response\n      });\n      callback();\n    });\n  };\n}\nexport function fetchpost(pk) {\n  var request = axios.get(\"\".concat(API_URL, \"/api/posts/\").concat(pk));\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      dispatch({\n        type: FETCH_POST,\n        payload: response\n      });\n    });\n  };\n}\nexport function deletePost(pk, callback) {\n  var request = axios.delete(\"\".concat(API_URL, \"/api/posts/\").concat(pk));\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      dispatch({\n        type: DELETE_POST,\n        payload: pk\n      });\n    }).then(function () {\n      return callback();\n    });\n  };\n}\nexport function fetchupdate(pk, callback) {\n  var request = axios.get(\"\".concat(API_URL, \"/api/posts/\").concat(pk));\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      dispatch({\n        type: FETCH_POST_UPDATE,\n        payload: response\n      });\n    }).then(function () {\n      return callback();\n    });\n  };\n}\nexport function update(pk, values, callback) {\n  console.log(values);\n  var request = axios.put(\"\".concat(API_URL, \"/api/posts/\").concat(pk), values);\n  return function (dispatch, getState) {\n    request.then(function (response) {\n      console.log(response);\n      dispatch({\n        type: UPDATE,\n        payload: response\n      });\n    }).then(function () {\n      return callback();\n    }).catch(function (_ref2) {\n      var response = _ref2.response;\n      console.log(response.data);\n    });\n  };\n} // pass a reducer case to actually remove the actual\n// post from the application state cause the fetch posts removes it\n// but it is good to update the local state as well","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/actions/notes.js"],"names":["axios","FETCH_POSTS","CREATE_POST","FETCH_POST","DELETE_POST","FETCH_POST_UPDATE","UPDATE","API_URL","togg","pk","values","callback","console","log","request","put","headers","Authorization","tokenize","dispatch","getState","then","response","type","payload","catch","data","fetchposts","link","get","createpost","post","fetchpost","deletePost","delete","fetchupdate","update"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nexport const FETCH_POSTS = 'fetch_posts'\nexport const CREATE_POST = 'create_posts'\nexport const FETCH_POST = 'fetchpost'\nexport const DELETE_POST = 'deletePost'\nexport const FETCH_POST_UPDATE = 'fetchpostupdate'\nexport const UPDATE = 'update'\n\nconst API_URL = 'http://localhost:8000'\n\n// export function fetchposts (link) {\n//   let request = axios.get(`${API_URL}/api/posts`)\n//   if (link) {\n//     request = axios.get(`${link}`)\n//   } else {\n//     request = axios.get(`${API_URL}/api/posts`)\n//   }\n//   return {\n//     type: FETCH_POSTS,\n//     payload: request\n//   }\n// }\n\nexport function togg (pk, values, callback) {\n  console.log(values)\n  const request = axios.put(`${API_URL}/router/posts/${pk}/like/`, values,\n    { headers: {\n      Authorization: `JWT ${tokenize}`\n    } })\n  return (dispatch, getState) => {\n    request.then((response) => {\n      console.log(response)\n      dispatch({ type: UPDATE, payload: response })\n    }).then(() => callback())\n      .catch(({ response }) => {\n        console.log(response.data)\n      })\n  }\n}\n\nexport function fetchposts (link) {\n  let request = axios.get(`${API_URL}/api/posts`)\n  if (link) {\n    request = axios.get(`${link}`)\n  } else {\n    request = axios.get(`${API_URL}/api/posts`)\n  }\n  return (dispatch, getState) => {\n    request.then((response) => {\n      dispatch({ type: FETCH_POSTS, payload: response.data })\n    })\n  }\n}\n\nexport function createpost (values, callback) {\n  const request = axios.post(`${API_URL}/api/posts`, values)\n  return (dispatch, getState) => {\n    request.then((response) => {\n      dispatch({ type: CREATE_POST, payload: response })\n      callback()\n    })\n  }\n}\n\nexport function fetchpost (pk) {\n  const request = axios.get(`${API_URL}/api/posts/${pk}`)\n  return (dispatch, getState) => {\n    request.then((response) => {\n      dispatch({ type: FETCH_POST, payload: response })\n    })\n  }\n}\n\nexport function deletePost (pk, callback) {\n  const request = axios.delete(`${API_URL}/api/posts/${pk}`)\n  return (dispatch, getState) => {\n    request.then((response) => {\n      dispatch({ type: DELETE_POST, payload: pk })\n    }).then(() => callback())\n  }\n}\n\nexport function fetchupdate (pk, callback) {\n  const request = axios.get(`${API_URL}/api/posts/${pk}`)\n  return (dispatch, getState) => {\n    request.then((response) => {\n      dispatch({ type: FETCH_POST_UPDATE, payload: response })\n    }).then(() => callback())\n  }\n}\n\nexport function update (pk, values, callback) {\n  console.log(values)\n  const request = axios.put(`${API_URL}/api/posts/${pk}`, values)\n  return (dispatch, getState) => {\n    request.then((response) => {\n      console.log(response)\n      dispatch({ type: UPDATE, payload: response })\n    }).then(() => callback())\n      .catch(({ response }) => {\n        console.log(response.data)\n      })\n  }\n}\n\n// pass a reducer case to actually remove the actual\n// post from the application state cause the fetch posts removes it\n// but it is good to update the local state as well\n"]},"metadata":{},"sourceType":"module"}