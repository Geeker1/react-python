{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { update, fetchupdate } from '../actions/notes';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nvar PostEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostEdit, _Component);\n\n  function PostEdit(props) {\n    var _this;\n\n    _classCallCheck(this, PostEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostEdit).call(this, props));\n    _this.indi = _this.indi.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PostEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.fetchupdate(pk, function () {\n        _this2.setState({\n          initialValues: {\n            name: 'name',\n            heading: 'heading',\n            description: 'woah'\n          }\n        });\n      });\n      this.props.initialize();\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var name = this.props.post.name;\n      console.log(field);\n      console.log(this.state);\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, touched ? error : '')));\n    }\n  }, {\n    key: \"indi\",\n    value: function indi() {\n      var d = this.code.d;\n      return _.map(d, function (p) {\n        return React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, p.a);\n      });\n    } // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this3 = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.update(pk, values, function () {\n        _this3.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          post = _this$props.post;\n\n      if (!post) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        // dis is pulled from the form helper that is included in content\n        console.log(this.props);\n        var _this$props$post = this.props.post,\n            name = _this$props$post.name,\n            heading = _this$props$post.heading,\n            description = _this$props$post.description;\n        return React.createElement(\"div\", {\n          className: \"login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"container pt-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          className: \"text-center pt-5 text-white text-uppercase header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, \"Edit \", name, \" post\"), React.createElement(\"div\", {\n          className: \"row justify-content-center mt-3 text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          className: \"px-2 bg-dark p-3 text-white rounded col-md-7 col-lg-7\",\n          onSubmit: handleSubmit(this.onSubmit.bind(this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, React.createElement(Field, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          valu: name,\n          placeholder: \"Name\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Heading\",\n          name: \"heading\",\n          type: \"text\",\n          valu: heading,\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Description\",\n          name: \"description\",\n          valu: description,\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary rounded-0 my-3 mx-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, \"Submit\"), React.createElement(Link, {\n          to: \"/posts\",\n          className: \"btn btn-success rounded-0 mx-2 my-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"Cancel\")))));\n      }\n    }\n  }]);\n\n  return PostEdit;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nfunction mapStateToProps(_ref, ownProps) {\n  var posts = _ref.posts;\n  console.log(posts);\n  var post = posts[ownProps.match.params.pk];\n  return {\n    post: post,\n    initialValues: posts.initialValues,\n    enableReinitialize: true\n  };\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, {\n  update: update,\n  fetchupdate: fetchupdate\n})(PostEdit));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js"],"names":["React","Component","Field","reduxForm","Link","connect","update","fetchupdate","_","PropTypes","PostEdit","props","indi","bind","pk","match","params","setState","initialValues","name","heading","description","initialize","field","meta","touched","error","post","console","log","state","className","label","type","input","d","code","map","p","a","values","history","push","reset","handleSubmit","onSubmit","renderField","validate","errors","mapStateToProps","ownProps","posts","enableReinitialize","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { update, fetchupdate } from '../actions/notes'\nimport _ from 'lodash'\nimport PropTypes from 'prop-types'\n\nclass PostEdit extends Component {\n  constructor (props) {\n    super(props)\n    this.indi = this.indi.bind(this)\n  }\n\n  componentDidMount () {\n    const { pk } = this.props.match.params\n    this.props.fetchupdate(pk, () => {\n      this.setState({ initialValues:\n      {\n        name: 'name',\n        heading: 'heading',\n        description: 'woah'\n      } })\n    })\n    this.props.initialize()\n  }\n\n  renderField (field) {\n    const { meta: { touched, error } } = field\n    const { name } = this.props.post\n    console.log(field)\n    console.log(this.state)\n    const className = `form-group ${touched && error ? 'has-danger'\n      : touched && !error ? 'has-none' : ''}`\n\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n        <div className='text-danger text-center'>\n          <small>{touched ? error : ''}</small>\n        </div>\n      </div>\n    )\n  }\n\n  indi () {\n    const { d } = this.code\n    return _.map(d, (p) => {\n      return (<p>{p.a}</p>)\n    })\n  }\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n    const { pk } = this.props.match.params\n    this.props.update(pk, values, () => {\n      this.props.history.push('/posts/')\n    })\n    this.props.reset()\n  }\n\n  render () {\n    // In using redux form the submit function is not really handled\n    // by redux-form so we have to involve redux-form in the submittal\n    //\n\n    const { handleSubmit, post } = this.props\n    if (!post) {\n      return (<h3>Loading...</h3>)\n    } else {\n      // dis is pulled from the form helper that is included in content\n      console.log(this.props)\n      const { name, heading, description } = this.props.post\n\n      return (\n        <div className='login'>\n          <div className='container pt-3'>\n\n            <h2 className='text-center pt-5 text-white text-uppercase header'>Edit {name} post</h2>\n            <div className='row justify-content-center mt-3 text-center'>\n              <form\n                className='px-2 bg-dark p-3 text-white rounded col-md-7 col-lg-7'\n                onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n                <Field\n                  label='Name'\n                  name='name'\n                  type='text'\n                  valu={name}\n                  placeholder='Name'\n                  component={this.renderField.bind(this)}\n                />\n                <Field\n                  label='Heading'\n                  name='heading'\n                  type='text'\n                  valu={heading}\n                  component={this.renderField.bind(this)}\n                />\n                <Field\n                  label='Description'\n                  name='description'\n                  valu={description}\n                  component={this.renderField.bind(this)}\n                />\n\n                <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n                <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n\n              </form>\n\n            </div>\n\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\n\nfunction mapStateToProps ({ posts }, ownProps) {\n  console.log(posts)\n  const post = posts[ownProps.match.params.pk]\n  return { post: post,\n    initialValues:posts.initialValues,\n  enableReinitialize:true\n  }\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm',\n})(connect(mapStateToProps, { update, fetchupdate })(PostEdit))\n"]},"metadata":{},"sourceType":"module"}