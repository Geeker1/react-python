{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { update, fetchupdate } from '../actions/notes';\nimport _ from 'lodash';\n\nvar PostEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostEdit, _Component);\n\n  function PostEdit(props) {\n    var _this;\n\n    _classCallCheck(this, PostEdit);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostEdit).call(this, props));\n    _this.state = {\n      a: 1,\n      b: 2,\n      c: 3,\n      d: [2, 3, 4, 5]\n    };\n    return _this;\n  }\n\n  _createClass(PostEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pk = this.props.match.params.pk;\n      this.props.fetchupdate(pk);\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      console.log(field);\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, touched ? error : '')));\n    } // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this2 = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.update(pk, values, function () {\n        _this2.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          post = _this$props.post;\n\n      if (!post) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        // dis is pulled from the form helper that is included in content\n        console.log(this.props);\n        var name = this.props.post.name;\n        var _this$state = this.state,\n            a = _this$state.a,\n            b = _this$state.b,\n            c = _this$state.c,\n            d = _this$state.d;\n\n        var a1 = _.random(1, 100);\n\n        var b1 = _.random(1.5, 20.0);\n\n        var c1 = _.random(0, 30);\n\n        var d1 = _.range(0, -4, -1);\n\n        var indi = function indi() {\n          return _.map(d, function (p) {\n            React.createElement(\"h2\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75\n              },\n              __self: this\n            }, p);\n          });\n        };\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"Edit \", name, \" post\"), React.createElement(\"form\", {\n          className: \"px-2\",\n          onSubmit: handleSubmit(this.onSubmit.bind(this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(Field, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Heading\",\n          name: \"heading\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Description\",\n          name: \"description\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary rounded-0 my-3 mx-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Submit\"), React.createElement(Link, {\n          to: \"/posts\",\n          className: \"btn btn-success rounded-0 mx-2 my-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"Cancel\")), React.createElement(\"h6\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \"Toggle values:\"), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, \"a: \", a), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, \"b: \", b), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"c: \", c), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"d: \", d), React.createElement(\"button\", {\n          className: \"btn btn-warning rounded-0 m-2\",\n          onClick: function onClick() {\n            _this3.setState({\n              a: a1,\n              b: b1,\n              c: c1,\n              d: d1\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"Toggle states\"));\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, indi());\n      }\n    }\n  }]);\n\n  return PostEdit;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nfunction mapStateToProps(_ref, ownProps) {\n  var posts = _ref.posts;\n  return {\n    post: posts[ownProps.match.params.pk]\n  };\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, {\n  update: update,\n  fetchupdate: fetchupdate\n})(PostEdit));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js"],"names":["React","Component","Field","reduxForm","Link","connect","update","fetchupdate","_","PostEdit","props","state","a","b","c","d","pk","match","params","field","meta","touched","error","console","log","className","label","type","input","values","history","push","reset","handleSubmit","post","name","a1","random","b1","c1","d1","range","indi","map","p","onSubmit","bind","renderField","setState","validate","errors","heading","description","mapStateToProps","ownProps","posts","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { update, fetchupdate } from '../actions/notes'\nimport _ from 'lodash'\n\nclass PostEdit extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      a: 1, b: 2, c: 3, d: [2, 3, 4, 5]\n    }\n  }\n\n  componentDidMount () {\n    const { pk } = this.props.match.params\n    this.props.fetchupdate(pk)\n  }\n\n  renderField (field) {\n    const { meta: { touched, error } } = field\n    console.log(field)\n    const className = `form-group ${touched && error ? 'has-danger'\n      : touched && !error ? 'has-none' : ''}`\n\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n        <div className='text-danger text-center'>\n          <small>{touched ? error : ''}</small>\n        </div>\n      </div>\n    )\n  }\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n    const { pk } = this.props.match.params\n    this.props.update(pk, values, () => {\n      this.props.history.push('/posts/')\n    })\n    this.props.reset()\n  }\n\n  render () {\n    // In using redux form the submit function is not really handled\n    // by redux-form so we have to involve redux-form in the submittal\n    //\n\n    const { handleSubmit, post } = this.props\n    if (!post) {\n      return (<h3>Loading...</h3>)\n    } else {\n      // dis is pulled from the form helper that is included in content\n      console.log(this.props)\n      const { name } = this.props.post\n      const { a, b, c, d } = this.state\n      let a1 = _.random(1, 100)\n      let b1 = _.random(1.5, 20.0)\n      let c1 = _.random(0, 30)\n      let d1 = _.range(0, -4, -1)\n      const indi = () => {\n        return _.map(d, (p) => {\n          <h2>{p}</h2>\n        })\n      }\n      return (\n\n        <div>\n          <h4 className='text-center'>Edit {name} post</h4>\n          <form className='px-2' onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n            <Field\n              label='Name'\n              name='name'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Heading'\n              name='heading'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Description'\n              name='description'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n\n            <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n            <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n\n          </form>\n          <h6>Toggle values:</h6>\n          <p>a: {a}</p>\n          <p>b: {b}</p>\n          <p>c: {c}</p>\n          <p>d: {d}</p>\n          <button\n            className='btn btn-warning rounded-0 m-2'\n            onClick={() => { this.setState({ a: a1, b: b1, c: c1, d: d1 }) }}>\n              Toggle states\n          </button>\n\n        </div>\n      )\n\n      return (\n        <div>{indi()}</div>\n      )\n    }\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nfunction mapStateToProps ({ posts }, ownProps) {\n  return { post: posts[ownProps.match.params.pk] }\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, { update, fetchupdate })(PostEdit))\n"]},"metadata":{},"sourceType":"module"}