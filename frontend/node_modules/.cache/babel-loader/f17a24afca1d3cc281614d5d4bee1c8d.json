{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { update, fetchupdate } from '../actions/notes';\nvar data = {\n  name: 'Love ya',\n  heading: 'Thats it',\n  description: 'Gerrawt'\n};\n\nvar PostEdit =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PostEdit, _Component);\n\n  function PostEdit(props) {\n    _classCallCheck(this, PostEdit);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PostEdit).call(this, props));\n  }\n\n  _createClass(PostEdit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var pk = this.props.match.params.pk;\n      this.props.fetchupdate(pk);\n    }\n  }, {\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      console.log(field);\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, touched ? error : '')));\n    } // Dry up your code once you seetwo pieces of JSX looking similar\n    // Dont duplicate logic, you can pass arbitrry properties in the component\n    // and they would be passed to the field props.. it can be any name you choose\n\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this = this;\n\n      var pk = this.props.match.params.pk;\n      this.props.update(pk, values, function () {\n        _this.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          post = _this$props.post;\n\n      if (!post) {\n        return React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        // dis is pulled from the form helper that is included in content\n        console.log(this.props);\n        var name = this.props.post.name;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, \"Edit \", name, \" post\"), React.createElement(\"form\", {\n          className: \"px-2\",\n          onSubmit: handleSubmit(this.onSubmit.bind(this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, React.createElement(Field, {\n          label: \"Name\",\n          name: \"name\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Heading\",\n          name: \"heading\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), React.createElement(Field, {\n          label: \"Description\",\n          name: \"description\",\n          type: \"text\",\n          component: this.renderField.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          type: \"submit\",\n          className: \"btn btn-primary rounded-0 my-3 mx-2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, \"Submit\"), React.createElement(Link, {\n          to: \"/posts\",\n          className: \"btn btn-success rounded-0 mx-2 my-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"Cancel\")));\n      }\n    }\n  }]);\n\n  return PostEdit;\n}(Component); // define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\n\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading';\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description';\n  } // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nfunction mapStateToProps(_ref, ownProps) {\n  var posts = _ref.posts;\n  return {\n    post: posts[ownProps.match.params.pk]\n  };\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, {\n  update: update,\n  fetchupdate: fetchupdate\n})(PostEdit));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/PostEdit.js"],"names":["React","Component","Field","reduxForm","Link","connect","update","fetchupdate","data","name","heading","description","PostEdit","props","pk","match","params","field","meta","touched","error","console","log","className","label","type","input","values","history","push","reset","handleSubmit","post","onSubmit","bind","renderField","validate","errors","mapStateToProps","ownProps","posts","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { update, fetchupdate } from '../actions/notes'\n\nconst data = {\n  name: 'Love ya',\n  heading: 'Thats it',\n  description: 'Gerrawt'\n}\n\nclass PostEdit extends Component {\n  constructor (props) {\n    super(props)\n  }\n\n  componentDidMount () {\n    const { pk } = this.props.match.params\n    this.props.fetchupdate(pk)\n  }\n\n  renderField (field) {\n    const { meta: { touched, error } } = field\n    console.log(field)\n    const className = `form-group ${touched && error ? 'has-danger'\n      : touched && !error ? 'has-none' : ''}`\n\n    // field.meta.error is an automatic property added to field object\n    // from validate function\n    return (\n      <div className={className}>\n        <label>{field.label}</label>\n        <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n        />\n        <div className='text-danger text-center'>\n          <small>{touched ? error : ''}</small>\n        </div>\n      </div>\n    )\n  }\n\n  // Dry up your code once you seetwo pieces of JSX looking similar\n  // Dont duplicate logic, you can pass arbitrry properties in the component\n  // and they would be passed to the field props.. it can be any name you choose\n\n  onSubmit (values) {\n    const { pk } = this.props.match.params\n    this.props.update(pk, values, () => {\n      this.props.history.push('/posts/')\n    })\n    this.props.reset()\n  }\n\n  render () {\n    // In using redux form the submit function is not really handled\n    // by redux-form so we have to involve redux-form in the submittal\n    //\n\n    const { handleSubmit, post } = this.props\n    if (!post) {\n      return (<h3>Loading...</h3>)\n    } else {\n      // dis is pulled from the form helper that is included in content\n      console.log(this.props)\n      const { name } = this.props.post\n      return (\n\n        <div>\n          <h4 className='text-center'>Edit {name} post</h4>\n          <form className='px-2' onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n            <Field\n              label='Name'\n              name='name'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Heading'\n              name='heading'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n            <Field\n              label='Description'\n              name='description'\n              type='text'\n              component={this.renderField.bind(this)}\n            />\n\n            <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n            <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n\n// define a helper function to validate the form and pass it to redux\n// form helper\n// name property must be identical to show up in errors object\nfunction validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if (!values.heading) {\n    errors.heading = 'Enter a heading'\n  }\n\n  if (!values.description) {\n    errors.description = 'Enter a Description'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  //  errors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nfunction mapStateToProps ({ posts }, ownProps) {\n  return { post: posts[ownProps.match.params.pk] }\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'PostEditForm'\n})(connect(mapStateToProps, { update, fetchupdate })(PostEdit))\n"]},"metadata":{},"sourceType":"module"}