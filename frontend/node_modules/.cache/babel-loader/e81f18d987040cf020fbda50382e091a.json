{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.default = loadingBarMiddleware;\n\nvar _loading_bar_ducks = require('./loading_bar_ducks');\n\nvar defaultTypeSuffixes = ['PENDING', 'FULFILLED', 'REJECTED'];\n\nfunction loadingBarMiddleware() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var promiseTypeSuffixes = config.promiseTypeSuffixes || defaultTypeSuffixes;\n  var scope = config.scope || _loading_bar_ducks.DEFAULT_SCOPE;\n  return function (_ref) {\n    var dispatch = _ref.dispatch;\n    return function (next) {\n      return function (action) {\n        if (action.type) {\n          var _promiseTypeSuffixes = _slicedToArray(promiseTypeSuffixes, 3),\n              PENDING = _promiseTypeSuffixes[0],\n              FULFILLED = _promiseTypeSuffixes[1],\n              REJECTED = _promiseTypeSuffixes[2];\n\n          var isPending = new RegExp(PENDING + '$', 'g');\n          var isFulfilled = new RegExp(FULFILLED + '$', 'g');\n          var isRejected = new RegExp(REJECTED + '$', 'g');\n          var actionScope = action.meta && action.meta.scope || action.scope || scope;\n\n          if (action.type.match(isPending)) {\n            dispatch((0, _loading_bar_ducks.showLoading)(actionScope));\n          } else if (action.type.match(isFulfilled) || action.type.match(isRejected)) {\n            dispatch((0, _loading_bar_ducks.hideLoading)(actionScope));\n          }\n        }\n\n        return next(action);\n      };\n    };\n  };\n}","map":null,"metadata":{},"sourceType":"script"}