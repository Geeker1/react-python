{"ast":null,"code":"import _classCallCheck from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/LoginForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { login } from '../actions/auth';\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginForm, _Component);\n\n  function LoginForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LoginForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"renderField\",\n    value: function renderField(field) {\n      var _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n      var className = \"form-group \".concat(touched && error ? 'has-danger' : touched && !error ? 'has-none' : ''); // field.meta.error is an automatic property added to field object\n      // from validate function\n\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, field.label), React.createElement(\"input\", Object.assign({\n        className: \"form-control rounded-0\",\n        type: \"\".concat(field.type)\n      }, field.input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"text-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, touched ? error : '')));\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(values) {\n      var _this2 = this;\n\n      this.props.login(values, function () {\n        _this2.props.history.push('/posts/');\n      });\n      this.props.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // In using redux form the submit function is not really handled\n      // by redux-form so we have to involve redux-form in the submittal\n      //\n      var handleSubmit = this.props.handleSubmit; // dis is pulled from the form helper that is included in content\n\n      console.log(this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Login\"), React.createElement(\"form\", {\n        className: \"px-2\",\n        onSubmit: handleSubmit(this.onSubmit.bind(this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Field, {\n        label: \"Username\",\n        name: \"name\",\n        type: \"text\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), React.createElement(Field, {\n        label: \"Password\",\n        name: \"password\",\n        type: \"password\",\n        component: this.renderField,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary rounded-0 my-3 mx-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(Link, {\n        to: \"/posts\",\n        className: \"btn btn-success rounded-0 mx-2 my-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Cancel\")));\n    }\n  }]);\n\n  return LoginForm;\n}(Component);\n\nfunction validate(values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  var errors = {}; // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name';\n  }\n\n  if (!values.password) {\n    errors.password = 'Enter a password';\n  } // if (!values.agree || values.agree == false) {\n  // \terrors.agree = 'Hello'\n  // }\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n\n\n  return errors;\n}\n\nexport default reduxForm({\n  validate: validate,\n  // converted to ES6 syntax (validate: validate)\n  form: 'LoginForm'\n})(connect(null, {\n  login: login\n})(LoginForm));","map":{"version":3,"sources":["/home/devcode/Desktop/django-projects/Djang-React/react/frontend/src/components/LoginForm.js"],"names":["React","Component","PropTypes","Field","reduxForm","Link","connect","login","LoginForm","state","username","password","field","meta","touched","error","className","label","type","input","values","props","history","push","reset","handleSubmit","console","log","onSubmit","bind","renderField","validate","errors","name","form"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,iBAAtB;;IAEMC,S;;;;;;;;;;;;;;;;;UAELC,K,GAAQ;AACPC,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,QAAQ,EAAE;AAFH,K;;;;;;gCAKKC,K,EAAO;AAAA,wBACmBA,KADnB,CACVC,IADU;AAAA,UACFC,OADE,eACFA,OADE;AAAA,UACOC,KADP,eACOA,KADP;AAElB,UAAMC,SAAS,wBAAiBF,OAAO,IAAIC,KAAX,GAAmB,YAAnB,GAC9BD,OAAO,IAAI,CAACC,KAAZ,GAAoB,UAApB,GAAiC,EADpB,CAAf,CAFkB,CAKlB;AACA;;AACA,aACG;AAAK,QAAA,SAAS,EAAEC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQJ,KAAK,CAACK,KAAd,CADA,EAEA;AACI,QAAA,SAAS,EAAC,wBADd;AAEI,QAAA,IAAI,YAAKL,KAAK,CAACM,IAAX;AAFR,SAGQN,KAAK,CAACO,KAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFA,EAOA;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQL,OAAO,GAAGC,KAAH,GAAW,EAA1B,CADJ,CAPA,CADH;AAaA;;;6BAESK,M,EAAQ;AAAA;;AACjB,WAAKC,KAAL,CAAWd,KAAX,CAAiBa,MAAjB,EAAyB,YAAM;AAC9B,QAAA,MAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,SAAxB;AACA,OAFD;AAGA,WAAKF,KAAL,CAAWG,KAAX;AACA;;;6BACQ;AACR;AACA;AACA;AAHQ,UAKAC,YALA,GAKiB,KAAKJ,KALtB,CAKAI,YALA,EAMR;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKN,KAAjB;AACC,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAuB,QAAA,QAAQ,EAAEI,YAAY,CAAC,KAAKG,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,SAAS,EAAE,KAAKC,WAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAOE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAC,UADR;AAEE,QAAA,IAAI,EAAC,UAFP;AAGE,QAAA,IAAI,EAAC,UAHP;AAIE,QAAA,SAAS,EAAE,KAAKA,WAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,EAcE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,qCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF,EAeE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,QAAT;AAAkB,QAAA,SAAS,EAAC,qCAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfF,CAFF,CADF;AAsBD;;;;EAjEqB7B,S;;AAoEtB,SAAS8B,QAAT,CAAmBX,MAAnB,EAA2B;AAC3B;AACA;AACA,MAAMY,MAAM,GAAG,EAAf,CAH2B,CAI3B;;AAEA,MAAI,CAACZ,MAAM,CAACa,IAAZ,EAAkB;AAChBD,IAAAA,MAAM,CAACC,IAAP,GAAc,cAAd;AACD;;AAED,MAAG,CAACb,MAAM,CAACT,QAAX,EAAoB;AACnBqB,IAAAA,MAAM,CAACrB,QAAP,GAAkB,kBAAlB;AACA,GAZ0B,CAc3B;AACA;AACA;AAEA;AACA;;;AACA,SAAOqB,MAAP;AACD;;AAED,eAAe5B,SAAS,CAAC;AACvB2B,EAAAA,QAAQ,EAARA,QADuB;AACb;AACVG,EAAAA,IAAI,EAAE;AAFiB,CAAD,CAAT,CAGZ5B,OAAO,CAAC,IAAD,EAAO;AAAEC,EAAAA,KAAK,EAALA;AAAF,CAAP,CAAP,CAAyBC,SAAzB,CAHY,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { login } from '../actions/auth'\n\nclass LoginForm extends Component {\n\n\tstate = {\n\t\tusername: \"\",\n\t\tpassword: \"\"\n\t}\n\n\trenderField (field) {\n  \tconst { meta: { touched, error } } = field\n  \tconst className = `form-group ${touched && error ? 'has-danger'\n  \t: touched && !error ? 'has-none' : ''}`\n\n  \t// field.meta.error is an automatic property added to field object\n  \t// from validate function\n  \treturn (\n      <div className={className}>\n      <label>{field.label}</label>\n      <input\n          className='form-control rounded-0'\n          type={`${field.type}`}\n          {...field.input}\n  \t  />\n      <div className='text-danger'>\n          <small>{touched ? error : ''}</small>\n        </div>\n    </div>\n  \t)\n  }\n\n  onSubmit (values) {\n  \tthis.props.login(values, () => {\n  \t\tthis.props.history.push('/posts/')\n  \t})\n  \tthis.props.reset()\n  }\n\trender () {\n  \t// In using redux form the submit function is not really handled\n  \t// by redux-form so we have to involve redux-form in the submittal\n  \t//\n\n  \tconst { handleSubmit } = this.props\n  \t// dis is pulled from the form helper that is included in content\n  \tconsole.log(this.props)\n    return (\n      <div>\n        <h2>Login</h2>\n        <form className='px-2' onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n          <Field\n            label='Username'\n            name='name'\n            type='text'\n            component={this.renderField}\n    \t\t/>\n          <Field\n            label='Password'\n            name='password'\n            type='password'\n            component={this.renderField}\n    \t\t/>\n\n          <button type='submit' className='btn btn-primary rounded-0 my-3 mx-2'>Submit</button>\n          <Link to='/posts' className='btn btn-success rounded-0 mx-2 my-3'>Cancel</Link>\n        </form>\n      </div>\n    )\n  }\n}\n\n  function validate (values) {\n  // inorder to validate input return a object we create from validate\n  // function....\n  const errors = {}\n  // Validate the input from 'values'\n\n  if (!values.name) {\n    errors.name = 'Enter a name'\n  }\n\n  if(!values.password){\n  \terrors.password = 'Enter a password'\n  }\n\n  // if (!values.agree || values.agree == false) {\n  // \terrors.agree = 'Hello'\n  // }\n\n  // if errors is empty the form is ready to submit,\n  // else there is a problem and redux form displays errors object\n  return errors\n}\n\nexport default reduxForm({\n  validate, // converted to ES6 syntax (validate: validate)\n  form: 'LoginForm'\n})(connect(null, { login })(LoginForm))\n"]},"metadata":{},"sourceType":"module"}