{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notify = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _Toast = require('./components/Toast');\n\nvar _Toast2 = _interopRequireDefault(_Toast);\n\nvar _Container = require('./components/Container');\n\nvar _Container2 = _interopRequireDefault(_Container);\n\nvar _defaults = require('./defaults');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* Render React component */\n\n\nfunction renderToast(text, type, timeout, color) {\n  var target = document.getElementById(_defaults.defaults.wrapperId);\n\n  _reactDom2.default.render(_react2.default.createElement(_Toast2.default, {\n    text: text,\n    timeout: timeout,\n    type: type,\n    color: color\n  }), target);\n}\n/* Unmount React component */\n\n\nfunction hide() {\n  var target = document.getElementById(_defaults.defaults.wrapperId);\n\n  _reactDom2.default.unmountComponentAtNode(target);\n}\n/**\n * Show Animated Toast Message\n * Returns true if the toast was shown, or false if show failed due to an existing notification\n *\n * @param  {String|Node} text    Text/Node to be displayed inside the toast.\n * @param  {Object}      options Display options for notification (See example below)\n *\n * [Options example]\n * {\n *   type:    {String} [success/error/info]\n *   timeout: {Int}    [timeout in ms]\n *   style:   {Object} [JS representation of CSS]\n * }\n */\n\n\nfunction show(text, type, timeout, color) {\n  if (!document.getElementById(_defaults.defaults.wrapperId).hasChildNodes()) {\n    // Use default timeout if not set.\n    var renderTimeout = timeout || _defaults.defaults.timeout; // Render Component with Props.\n\n    renderToast(text, type, renderTimeout, color);\n\n    if (renderTimeout === -1) {\n      return false;\n    } // Unmount react component after the animation finished.\n\n\n    setTimeout(function () {\n      hide();\n    }, renderTimeout + _defaults.defaults.animationDuration);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Add to Animated Toast Message Queue\n * Display immediately if no queue\n * @param  {Number} initialRecallDelay   If the call to show fails because of an existing\n *                                       notification, how long to wait until we retry (ms)\n * @param  {Number} recallDelayIncrement Each time a successive call fails, the recall delay\n *                                       will be incremented by this (ms)\n * @return {[type]}                      [description]\n */\n\n\nfunction createShowQueue() {\n  var _this = this;\n\n  var initialRecallDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 500;\n  var recallDelayIncrement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500; // Array to hold queued messages\n\n  this.msgs = []; // Is the showNotify function in progress - used so we can call showNotify when a\n  // message is added to an empty queue.\n\n  this.isNotifying = false;\n  this.currentRecallDelay = initialRecallDelay; // Retrieve the next message from the queue and try to show it\n\n  this.showNotify = function () {\n    // If there are no messages in the queue\n    if (_this.msgs.length === 0) {\n      _this.isNotifying = false;\n      return;\n    }\n\n    _this.isNotifying = true;\n\n    var current = _this.msgs.pop(); // show will now return true if it is able to send the message,\n    // or false if there is an existing message\n\n\n    if (show(current.text, current.type, current.timeout, current.color)) {\n      _this.currentRecallDelay = initialRecallDelay;\n\n      if (current.timeout > 0) {\n        setTimeout(function () {\n          return _this.showNotify();\n        }, current.timeout + _defaults.defaults.animationDuration);\n      }\n    } else {\n      // If message show failed, re-add the current message to the front of the queue\n      _this.msgs.unshift(current);\n\n      setTimeout(function () {\n        return _this.showNotify();\n      }, _this.currentRecallDelay);\n      _this.currentRecallDelay += recallDelayIncrement;\n    }\n  };\n\n  return function (text) {\n    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _defaults.defaults.timeout;\n    var color = arguments[3];\n\n    _this.msgs.push({\n      text: text,\n      type: type,\n      timeout: timeout,\n      color: color\n    });\n\n    if (!_this.isNotifying) {\n      _this.showNotify();\n    }\n  };\n}\n/* Export notification functions */\n\n\nvar notify = exports.notify = {\n  show: show,\n  hide: hide,\n  createShowQueue: createShowQueue\n};\nexports.default = _Container2.default;","map":null,"metadata":{},"sourceType":"script"}